import * as i0 from '@angular/core';
import { inject, contentChild, effect, Directive, Input } from '@angular/core';
import { Platform } from '@angular/cdk/platform';
import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { NgScrollbarExt } from 'ngx-scrollbar';

class NgScrollbarCdkVirtualScroll {
    constructor() {
        this.scrollbar = inject(NgScrollbarExt);
        this.platform = inject(Platform);
        this.virtualScrollViewportRef = contentChild(CdkVirtualScrollViewport);
        this.scrollbar.externalViewport = '.cdk-virtual-scroll-viewport';
        this.scrollbar.externalContentWrapper = '.cdk-virtual-scroll-content-wrapper';
        this.scrollbar.externalSpacer = '.cdk-virtual-scroll-spacer';
        effect((onCleanup) => {
            // If content width is bigger than the viewport, we need to update the spacer width to display horizontal scrollbar
            let resizeObserver;
            const virtualScrollViewport = this.virtualScrollViewportRef();
            const spacer = virtualScrollViewport.elementRef.nativeElement.querySelector(this.scrollbar.externalSpacer);
            if (this.platform.isBrowser && virtualScrollViewport) {
                resizeObserver = new ResizeObserver((entries) => {
                    entries.forEach((entry) => {
                        if (virtualScrollViewport.orientation === 'vertical') {
                            spacer.style.setProperty('width', `${entry.contentRect.width}px`);
                        }
                        else {
                            spacer.style.setProperty('height', `${entry.contentRect.height}px`);
                        }
                    });
                    // Disconnect after first change if directive is not set to auto
                    if (this.cdkVirtualScrollViewport !== 'auto') {
                        resizeObserver.disconnect();
                    }
                    // Observe content wrapper for size changes
                    resizeObserver.observe(virtualScrollViewport._contentWrapper.nativeElement);
                });
            }
            onCleanup(() => resizeObserver?.disconnect());
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: NgScrollbarCdkVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.2.0", version: "18.1.2", type: NgScrollbarCdkVirtualScroll, isStandalone: true, selector: "ng-scrollbar[cdkVirtualScrollViewport]", inputs: { cdkVirtualScrollViewport: "cdkVirtualScrollViewport" }, queries: [{ propertyName: "virtualScrollViewportRef", first: true, predicate: CdkVirtualScrollViewport, descendants: true, isSignal: true }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: NgScrollbarCdkVirtualScroll, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'ng-scrollbar[cdkVirtualScrollViewport]'
                }]
        }], ctorParameters: () => [], propDecorators: { cdkVirtualScrollViewport: [{
                type: Input
            }] } });

/**
 * Generated bundle index. Do not edit.
 */

export { NgScrollbarCdkVirtualScroll };
//# sourceMappingURL=ngx-scrollbar-cdk.mjs.map
