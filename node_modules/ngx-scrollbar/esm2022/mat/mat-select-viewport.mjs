import { Directive, effect, inject } from '@angular/core';
import { MatSelect } from '@angular/material/select';
import { NG_SCROLLBAR } from 'ngx-scrollbar';
import * as i0 from "@angular/core";
export class NgScrollbarMatSelectViewport {
    constructor() {
        this.scrollbar = inject(NG_SCROLLBAR);
        this.matSelect = inject(MatSelect);
        effect(() => {
            if (this.scrollbar.isVerticallyScrollable() && this.matSelect.panelOpen) {
                const selected = this.matSelect.selected;
                if (selected) {
                    const element = Array.isArray(selected) ? selected[0]._getHostElement() : selected._getHostElement();
                    const height = this.scrollbar.nativeElement.clientHeight;
                    this.scrollbar.viewport.scrollYTo(element.offsetTop + element.offsetHeight - height);
                }
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: NgScrollbarMatSelectViewport, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.2", type: NgScrollbarMatSelectViewport, isStandalone: true, selector: "ng-scrollbar[matSelectViewport]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: NgScrollbarMatSelectViewport, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'ng-scrollbar[matSelectViewport]'
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlbGVjdC12aWV3cG9ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zY3JvbGxiYXIvbWF0L3NyYy9tYXQtc2VsZWN0LXZpZXdwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRCxPQUFPLEVBQWEsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFnQixZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTTNELE1BQU0sT0FBTyw0QkFBNEI7SUFNdkM7UUFKaUIsY0FBUyxHQUFpQixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFL0MsY0FBUyxHQUFjLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUd4RCxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1YsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLHNCQUFzQixFQUFFLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztnQkFDeEUsTUFBTSxRQUFRLEdBQTRCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO2dCQUNsRSxJQUFJLFFBQVEsRUFBRSxDQUFDO29CQUNiLE1BQU0sT0FBTyxHQUFnQixLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsQ0FBQztvQkFDbEgsTUFBTSxNQUFNLEdBQVcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO29CQUNqRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxDQUFDO2dCQUN2RixDQUFDO1lBQ0gsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs4R0FqQlUsNEJBQTRCO2tHQUE1Qiw0QkFBNEI7OzJGQUE1Qiw0QkFBNEI7a0JBSnhDLFNBQVM7bUJBQUM7b0JBQ1QsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSxpQ0FBaUM7aUJBQzVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBlZmZlY3QsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNYXRPcHRpb24sIE1hdFNlbGVjdCB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NlbGVjdCc7XHJcbmltcG9ydCB7IF9OZ1Njcm9sbGJhciwgTkdfU0NST0xMQkFSIH0gZnJvbSAnbmd4LXNjcm9sbGJhcic7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzdGFuZGFsb25lOiB0cnVlLFxyXG4gIHNlbGVjdG9yOiAnbmctc2Nyb2xsYmFyW21hdFNlbGVjdFZpZXdwb3J0XSdcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nU2Nyb2xsYmFyTWF0U2VsZWN0Vmlld3BvcnQge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IHNjcm9sbGJhcjogX05nU2Nyb2xsYmFyID0gaW5qZWN0KE5HX1NDUk9MTEJBUik7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgbWF0U2VsZWN0OiBNYXRTZWxlY3QgPSBpbmplY3QoTWF0U2VsZWN0KTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBlZmZlY3QoKCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5zY3JvbGxiYXIuaXNWZXJ0aWNhbGx5U2Nyb2xsYWJsZSgpICYmIHRoaXMubWF0U2VsZWN0LnBhbmVsT3Blbikge1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkOiBNYXRPcHRpb24gfCBNYXRPcHRpb25bXSA9IHRoaXMubWF0U2VsZWN0LnNlbGVjdGVkO1xyXG4gICAgICAgIGlmIChzZWxlY3RlZCkge1xyXG4gICAgICAgICAgY29uc3QgZWxlbWVudDogSFRNTEVsZW1lbnQgPSBBcnJheS5pc0FycmF5KHNlbGVjdGVkKSA/IHNlbGVjdGVkWzBdLl9nZXRIb3N0RWxlbWVudCgpIDogc2VsZWN0ZWQuX2dldEhvc3RFbGVtZW50KCk7XHJcbiAgICAgICAgICBjb25zdCBoZWlnaHQ6IG51bWJlciA9IHRoaXMuc2Nyb2xsYmFyLm5hdGl2ZUVsZW1lbnQuY2xpZW50SGVpZ2h0O1xyXG4gICAgICAgICAgdGhpcy5zY3JvbGxiYXIudmlld3BvcnQuc2Nyb2xsWVRvKGVsZW1lbnQub2Zmc2V0VG9wICsgZWxlbWVudC5vZmZzZXRIZWlnaHQgLSBoZWlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==