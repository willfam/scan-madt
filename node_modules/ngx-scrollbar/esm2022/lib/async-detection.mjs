import { Directive, Input, inject, NgZone } from '@angular/core';
import { NgScrollbarExt } from './ng-scrollbar-ext';
import { mutationObserver } from './viewport';
import * as i0 from "@angular/core";
export class AsyncDetection {
    constructor() {
        this.scrollbar = inject(NgScrollbarExt);
        this.zone = inject(NgZone);
        this.scrollbar.skipInit = true;
    }
    ngOnInit() {
        this.zone.runOutsideAngular(() => {
            this.subscription = mutationObserver(this.scrollbar.nativeElement, 100).subscribe(() => {
                if (!this.scrollbar.viewport.initialized()) {
                    // Search for external viewport
                    const viewportElement = this.scrollbar.nativeElement.querySelector(this.scrollbar.externalViewport);
                    // Search for external content wrapper
                    const contentWrapperElement = this.scrollbar.nativeElement.querySelector(this.scrollbar.externalContentWrapper);
                    if (viewportElement && contentWrapperElement) {
                        // If an external spacer selector is provided, search for it
                        let spacerElement;
                        if (this.scrollbar.externalSpacer) {
                            spacerElement = this.scrollbar.nativeElement.querySelector(this.scrollbar.externalSpacer);
                        }
                        // Initialize viewport
                        this.scrollbar.viewport.init(viewportElement, contentWrapperElement, spacerElement);
                        // Attach scrollbars
                        this.scrollbar.attachScrollbars();
                        if (!this.asyncDetection) {
                            this.subscription.unsubscribe();
                        }
                    }
                }
                else {
                    const viewportElement = this.scrollbar.nativeElement.querySelector(this.scrollbar.externalViewport);
                    const contentWrapperElement = this.scrollbar.nativeElement.querySelector(this.scrollbar.externalContentWrapper);
                    if (!viewportElement || !contentWrapperElement) {
                        this.scrollbar.viewport.nativeElement = null;
                        this.scrollbar.viewport.contentWrapperElement = null;
                        this.scrollbar.viewport.initialized.set(false);
                    }
                }
            });
        });
    }
    ngOnDestroy() {
        this.subscription?.unsubscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: AsyncDetection, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.2", type: AsyncDetection, isStandalone: true, selector: "ng-scrollbar[externalViewport][asyncDetection]", inputs: { asyncDetection: "asyncDetection" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: AsyncDetection, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'ng-scrollbar[externalViewport][asyncDetection]'
                }]
        }], ctorParameters: () => [], propDecorators: { asyncDetection: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN5bmMtZGV0ZWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXNjcm9sbGJhci9zcmMvbGliL2FzeW5jLWRldGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQXFCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVwRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sWUFBWSxDQUFDOztBQU05QyxNQUFNLE9BQU8sY0FBYztJQVN6QjtRQVBpQixjQUFTLEdBQW1CLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNuRCxTQUFJLEdBQVcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBTzdDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztJQUNqQyxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQy9CLElBQUksQ0FBQyxZQUFZLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtnQkFDckYsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUM7b0JBQzNDLCtCQUErQjtvQkFDL0IsTUFBTSxlQUFlLEdBQWdCLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7b0JBRWpILHNDQUFzQztvQkFDdEMsTUFBTSxxQkFBcUIsR0FBZ0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsQ0FBQztvQkFFN0gsSUFBSSxlQUFlLElBQUkscUJBQXFCLEVBQUUsQ0FBQzt3QkFDN0MsNERBQTREO3dCQUM1RCxJQUFJLGFBQTBCLENBQUM7d0JBQy9CLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsQ0FBQzs0QkFDbEMsYUFBYSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO3dCQUM1RixDQUFDO3dCQUVELHNCQUFzQjt3QkFDdEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxxQkFBcUIsRUFBRSxhQUFhLENBQUMsQ0FBQzt3QkFDcEYsb0JBQW9CO3dCQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUM7d0JBRWxDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7NEJBQ3pCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7d0JBQ2xDLENBQUM7b0JBQ0gsQ0FBQztnQkFDSCxDQUFDO3FCQUFNLENBQUM7b0JBQ04sTUFBTSxlQUFlLEdBQWdCLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7b0JBQ2pILE1BQU0scUJBQXFCLEdBQWdCLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLENBQUM7b0JBRTdILElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO3dCQUMvQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO3dCQUM3QyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7d0JBQ3JELElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ2pELENBQUM7Z0JBQ0gsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLENBQUM7SUFDbkMsQ0FBQzs4R0F2RFUsY0FBYztrR0FBZCxjQUFjOzsyRkFBZCxjQUFjO2tCQUoxQixTQUFTO21CQUFDO29CQUNULFVBQVUsRUFBRSxJQUFJO29CQUNoQixRQUFRLEVBQUUsZ0RBQWdEO2lCQUMzRDt3REFRVSxjQUFjO3NCQUF0QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgaW5qZWN0LCBPbkluaXQsIE9uRGVzdHJveSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBOZ1Njcm9sbGJhckV4dCB9IGZyb20gJy4vbmctc2Nyb2xsYmFyLWV4dCc7XHJcbmltcG9ydCB7IG11dGF0aW9uT2JzZXJ2ZXIgfSBmcm9tICcuL3ZpZXdwb3J0JztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHN0YW5kYWxvbmU6IHRydWUsXHJcbiAgc2VsZWN0b3I6ICduZy1zY3JvbGxiYXJbZXh0ZXJuYWxWaWV3cG9ydF1bYXN5bmNEZXRlY3Rpb25dJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQXN5bmNEZXRlY3Rpb24gaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgc2Nyb2xsYmFyOiBOZ1Njcm9sbGJhckV4dCA9IGluamVjdChOZ1Njcm9sbGJhckV4dCk7XHJcbiAgcHJpdmF0ZSByZWFkb25seSB6b25lOiBOZ1pvbmUgPSBpbmplY3QoTmdab25lKTtcclxuXHJcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcclxuXHJcbiAgQElucHV0KCkgYXN5bmNEZXRlY3Rpb246ICdhdXRvJyB8ICcnO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuc2Nyb2xsYmFyLnNraXBJbml0ID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBtdXRhdGlvbk9ic2VydmVyKHRoaXMuc2Nyb2xsYmFyLm5hdGl2ZUVsZW1lbnQsIDEwMCkuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICBpZiAoIXRoaXMuc2Nyb2xsYmFyLnZpZXdwb3J0LmluaXRpYWxpemVkKCkpIHtcclxuICAgICAgICAgIC8vIFNlYXJjaCBmb3IgZXh0ZXJuYWwgdmlld3BvcnRcclxuICAgICAgICAgIGNvbnN0IHZpZXdwb3J0RWxlbWVudDogSFRNTEVsZW1lbnQgPSB0aGlzLnNjcm9sbGJhci5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5zY3JvbGxiYXIuZXh0ZXJuYWxWaWV3cG9ydCk7XHJcblxyXG4gICAgICAgICAgLy8gU2VhcmNoIGZvciBleHRlcm5hbCBjb250ZW50IHdyYXBwZXJcclxuICAgICAgICAgIGNvbnN0IGNvbnRlbnRXcmFwcGVyRWxlbWVudDogSFRNTEVsZW1lbnQgPSB0aGlzLnNjcm9sbGJhci5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5zY3JvbGxiYXIuZXh0ZXJuYWxDb250ZW50V3JhcHBlcik7XHJcblxyXG4gICAgICAgICAgaWYgKHZpZXdwb3J0RWxlbWVudCAmJiBjb250ZW50V3JhcHBlckVsZW1lbnQpIHtcclxuICAgICAgICAgICAgLy8gSWYgYW4gZXh0ZXJuYWwgc3BhY2VyIHNlbGVjdG9yIGlzIHByb3ZpZGVkLCBzZWFyY2ggZm9yIGl0XHJcbiAgICAgICAgICAgIGxldCBzcGFjZXJFbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2Nyb2xsYmFyLmV4dGVybmFsU3BhY2VyKSB7XHJcbiAgICAgICAgICAgICAgc3BhY2VyRWxlbWVudCA9IHRoaXMuc2Nyb2xsYmFyLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnNjcm9sbGJhci5leHRlcm5hbFNwYWNlcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemUgdmlld3BvcnRcclxuICAgICAgICAgICAgdGhpcy5zY3JvbGxiYXIudmlld3BvcnQuaW5pdCh2aWV3cG9ydEVsZW1lbnQsIGNvbnRlbnRXcmFwcGVyRWxlbWVudCwgc3BhY2VyRWxlbWVudCk7XHJcbiAgICAgICAgICAgIC8vIEF0dGFjaCBzY3JvbGxiYXJzXHJcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsYmFyLmF0dGFjaFNjcm9sbGJhcnMoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5hc3luY0RldGVjdGlvbikge1xyXG4gICAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3Qgdmlld3BvcnRFbGVtZW50OiBIVE1MRWxlbWVudCA9IHRoaXMuc2Nyb2xsYmFyLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnNjcm9sbGJhci5leHRlcm5hbFZpZXdwb3J0KTtcclxuICAgICAgICAgIGNvbnN0IGNvbnRlbnRXcmFwcGVyRWxlbWVudDogSFRNTEVsZW1lbnQgPSB0aGlzLnNjcm9sbGJhci5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5zY3JvbGxiYXIuZXh0ZXJuYWxDb250ZW50V3JhcHBlcik7XHJcblxyXG4gICAgICAgICAgaWYgKCF2aWV3cG9ydEVsZW1lbnQgfHwgIWNvbnRlbnRXcmFwcGVyRWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLnNjcm9sbGJhci52aWV3cG9ydC5uYXRpdmVFbGVtZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5zY3JvbGxiYXIudmlld3BvcnQuY29udGVudFdyYXBwZXJFbGVtZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5zY3JvbGxiYXIudmlld3BvcnQuaW5pdGlhbGl6ZWQuc2V0KGZhbHNlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgIHRoaXMuc3Vic2NyaXB0aW9uPy51bnN1YnNjcmliZSgpO1xyXG4gIH1cclxufVxyXG4iXX0=