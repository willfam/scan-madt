import { Observable, throttleTime } from 'rxjs';
import { ScrollbarUpdateReason } from '../ng-scrollbar.model';
export function resizeObserver({ element, contentWrapper, throttleDuration }) {
    // The first time the observer is triggered as soon as the element is observed,
    // So we need to differentiate the reason of the event fired
    let reason = ScrollbarUpdateReason.AfterInit;
    let resizeObserver;
    const stream = new Observable((observer) => {
        resizeObserver = new ResizeObserver(() => {
            observer.next(reason);
            // After first init event, mark the reason to be a resize from now on.
            reason = ScrollbarUpdateReason.Resized;
        });
        resizeObserver.observe(element);
        // If a content element has a supporting content scrollbars, observe it!
        if (contentWrapper) {
            resizeObserver.observe(contentWrapper);
        }
        return () => {
            resizeObserver?.disconnect();
        };
    });
    return throttleDuration ? stream.pipe(throttleTime(throttleDuration, null, {
        leading: true,
        trailing: true
    })) : stream;
}
export function mutationObserver(element, throttleDuration) {
    let mutationObserver;
    const stream = new Observable((observer) => {
        mutationObserver = new MutationObserver(() => {
            observer.next();
        });
        mutationObserver.observe(element, { childList: true, subtree: true });
        return () => {
            mutationObserver?.disconnect();
        };
    });
    return stream.pipe(throttleTime(throttleDuration, null, {
        leading: true,
        trailing: true
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3NyYy9saWIvdmlld3BvcnQvb2JzZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBWSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDMUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFROUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQWM7SUFDdEYsK0VBQStFO0lBQy9FLDREQUE0RDtJQUM1RCxJQUFJLE1BQU0sR0FBMEIscUJBQXFCLENBQUMsU0FBUyxDQUFDO0lBRXBFLElBQUksY0FBOEIsQ0FBQztJQUVuQyxNQUFNLE1BQU0sR0FBc0MsSUFBSSxVQUFVLENBQUMsQ0FBQyxRQUF5QyxFQUFFLEVBQUU7UUFDN0csY0FBYyxHQUFHLElBQUksY0FBYyxDQUFDLEdBQUcsRUFBRTtZQUN2QyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RCLHNFQUFzRTtZQUN0RSxNQUFNLEdBQUcscUJBQXFCLENBQUMsT0FBTyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsY0FBYyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVoQyx3RUFBd0U7UUFDeEUsSUFBSSxjQUFjLEVBQUUsQ0FBQztZQUNuQixjQUFjLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3pDLENBQUM7UUFFRCxPQUFPLEdBQUcsRUFBRTtZQUNWLGNBQWMsRUFBRSxVQUFVLEVBQUUsQ0FBQztRQUMvQixDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFLElBQUksRUFBRTtRQUN6RSxPQUFPLEVBQUUsSUFBSTtRQUNiLFFBQVEsRUFBRSxJQUFJO0tBQ2YsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUNmLENBQUM7QUFHRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsT0FBb0IsRUFBRSxnQkFBd0I7SUFDN0UsSUFBSSxnQkFBa0MsQ0FBQztJQUV2QyxNQUFNLE1BQU0sR0FBcUIsSUFBSSxVQUFVLENBQUMsQ0FBQyxRQUF3QixFQUFFLEVBQUU7UUFDM0UsZ0JBQWdCLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUU7WUFDM0MsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFFdEUsT0FBTyxHQUFHLEVBQUU7WUFDVixnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsQ0FBQztRQUNqQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFO1FBQ3RELE9BQU8sRUFBRSxJQUFJO1FBQ2IsUUFBUSxFQUFFLElBQUk7S0FDZixDQUFDLENBQUMsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBPYnNlcnZlciwgdGhyb3R0bGVUaW1lIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFNjcm9sbGJhclVwZGF0ZVJlYXNvbiB9IGZyb20gJy4uL25nLXNjcm9sbGJhci5tb2RlbCc7XHJcblxyXG5pbnRlcmZhY2UgUmVzaXplQXJncyB7XHJcbiAgZWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbiAgdGhyb3R0bGVEdXJhdGlvbjogbnVtYmVyO1xyXG4gIGNvbnRlbnRXcmFwcGVyPzogSFRNTEVsZW1lbnQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXNpemVPYnNlcnZlcih7IGVsZW1lbnQsIGNvbnRlbnRXcmFwcGVyLCB0aHJvdHRsZUR1cmF0aW9uIH06IFJlc2l6ZUFyZ3MpOiBPYnNlcnZhYmxlPFNjcm9sbGJhclVwZGF0ZVJlYXNvbj4ge1xyXG4gIC8vIFRoZSBmaXJzdCB0aW1lIHRoZSBvYnNlcnZlciBpcyB0cmlnZ2VyZWQgYXMgc29vbiBhcyB0aGUgZWxlbWVudCBpcyBvYnNlcnZlZCxcclxuICAvLyBTbyB3ZSBuZWVkIHRvIGRpZmZlcmVudGlhdGUgdGhlIHJlYXNvbiBvZiB0aGUgZXZlbnQgZmlyZWRcclxuICBsZXQgcmVhc29uOiBTY3JvbGxiYXJVcGRhdGVSZWFzb24gPSBTY3JvbGxiYXJVcGRhdGVSZWFzb24uQWZ0ZXJJbml0O1xyXG5cclxuICBsZXQgcmVzaXplT2JzZXJ2ZXI6IFJlc2l6ZU9ic2VydmVyO1xyXG5cclxuICBjb25zdCBzdHJlYW06IE9ic2VydmFibGU8U2Nyb2xsYmFyVXBkYXRlUmVhc29uPiA9IG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcjogT2JzZXJ2ZXI8U2Nyb2xsYmFyVXBkYXRlUmVhc29uPikgPT4ge1xyXG4gICAgcmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKCkgPT4ge1xyXG4gICAgICBvYnNlcnZlci5uZXh0KHJlYXNvbik7XHJcbiAgICAgIC8vIEFmdGVyIGZpcnN0IGluaXQgZXZlbnQsIG1hcmsgdGhlIHJlYXNvbiB0byBiZSBhIHJlc2l6ZSBmcm9tIG5vdyBvbi5cclxuICAgICAgcmVhc29uID0gU2Nyb2xsYmFyVXBkYXRlUmVhc29uLlJlc2l6ZWQ7XHJcbiAgICB9KTtcclxuICAgIHJlc2l6ZU9ic2VydmVyLm9ic2VydmUoZWxlbWVudCk7XHJcblxyXG4gICAgLy8gSWYgYSBjb250ZW50IGVsZW1lbnQgaGFzIGEgc3VwcG9ydGluZyBjb250ZW50IHNjcm9sbGJhcnMsIG9ic2VydmUgaXQhXHJcbiAgICBpZiAoY29udGVudFdyYXBwZXIpIHtcclxuICAgICAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShjb250ZW50V3JhcHBlcik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgcmVzaXplT2JzZXJ2ZXI/LmRpc2Nvbm5lY3QoKTtcclxuICAgIH07XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiB0aHJvdHRsZUR1cmF0aW9uID8gc3RyZWFtLnBpcGUodGhyb3R0bGVUaW1lKHRocm90dGxlRHVyYXRpb24sIG51bGwsIHtcclxuICAgIGxlYWRpbmc6IHRydWUsXHJcbiAgICB0cmFpbGluZzogdHJ1ZVxyXG4gIH0pKSA6IHN0cmVhbTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtdXRhdGlvbk9ic2VydmVyKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCB0aHJvdHRsZUR1cmF0aW9uOiBudW1iZXIpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcclxuICBsZXQgbXV0YXRpb25PYnNlcnZlcjogTXV0YXRpb25PYnNlcnZlcjtcclxuXHJcbiAgY29uc3Qgc3RyZWFtOiBPYnNlcnZhYmxlPHZvaWQ+ID0gbmV3IE9ic2VydmFibGUoKG9ic2VydmVyOiBPYnNlcnZlcjx2b2lkPikgPT4ge1xyXG4gICAgbXV0YXRpb25PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcclxuICAgICAgb2JzZXJ2ZXIubmV4dCgpO1xyXG4gICAgfSk7XHJcbiAgICBtdXRhdGlvbk9ic2VydmVyLm9ic2VydmUoZWxlbWVudCwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7XHJcblxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgbXV0YXRpb25PYnNlcnZlcj8uZGlzY29ubmVjdCgpO1xyXG4gICAgfTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHN0cmVhbS5waXBlKHRocm90dGxlVGltZSh0aHJvdHRsZUR1cmF0aW9uLCBudWxsLCB7XHJcbiAgICBsZWFkaW5nOiB0cnVlLFxyXG4gICAgdHJhaWxpbmc6IHRydWVcclxuICB9KSk7XHJcbn1cclxuIl19