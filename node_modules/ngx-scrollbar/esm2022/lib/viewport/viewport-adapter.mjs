import { signal } from '@angular/core';
import { ViewportClasses } from '../utils/common';
/**
 * Class representing a viewport adapter.
 * Provides methods and properties to interact with a viewport and its content.
 */
export class ViewportAdapter {
    constructor() {
        /*
         * A signal that indicates when viewport adapter is initialized
         */
        this.initialized = signal(false);
    }
    /** Viewport clientHeight */
    get offsetHeight() {
        return this.nativeElement.offsetHeight;
    }
    /** Viewport clientWidth */
    get offsetWidth() {
        return this.nativeElement.offsetWidth;
    }
    /** Viewport scrollTop */
    get scrollTop() {
        return this.nativeElement.scrollTop;
    }
    /** Viewport scrollLeft */
    get scrollLeft() {
        return this.nativeElement.scrollLeft;
    }
    /** Content height */
    get contentHeight() {
        return this.contentWrapperElement.offsetHeight;
    }
    /** Content width */
    get contentWidth() {
        return this.contentWrapperElement.offsetWidth;
    }
    /** The remaining vertical scrollable distance. */
    get scrollMaxX() {
        return this.contentWidth - this.offsetWidth;
    }
    /** The vertical remaining scrollable distance */
    get scrollMaxY() {
        return this.contentHeight - this.offsetHeight;
    }
    /**
     * Initialize viewport
     */
    init(viewportElement, contentElement, spacerElement) {
        // Add viewport class
        viewportElement.classList.add(ViewportClasses.Viewport);
        this.nativeElement = viewportElement;
        // Add content wrapper class
        contentElement.classList.add(ViewportClasses.Content);
        // When integrating the scrollbar with virtual scroll, the content wrapper will have fake size,
        // and a spacer element will have the real size
        // Therefore, if spaceElement is provided, it will be observed instead of the content wrapper
        if (spacerElement) {
            // Set relative position on the spacer element to enable the functionality of sticky for the scrollbars
            spacerElement.style.position = 'relative';
            this.contentWrapperElement = spacerElement;
        }
        else {
            // If spacer is not provided, set it as the content wrapper
            this.contentWrapperElement = contentElement;
        }
        this.initialized.set(true);
    }
    /**
     * Scrolls the viewport vertically to the specified value.
     */
    scrollYTo(value) {
        this.nativeElement.scrollTop = value;
    }
    /**
     * Scrolls the viewport horizontally to the specified value.
     */
    scrollXTo(value) {
        this.nativeElement.scrollLeft = value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld3BvcnQtYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zY3JvbGxiYXIvc3JjL2xpYi92aWV3cG9ydC92aWV3cG9ydC1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVsRDs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sZUFBZTtJQUE1QjtRQVlFOztXQUVHO1FBQ0gsZ0JBQVcsR0FBNEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBZ0Z2RCxDQUFDO0lBOUVDLDRCQUE0QjtJQUM1QixJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO0lBQ3pDLENBQUM7SUFFRCwyQkFBMkI7SUFDM0IsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztJQUN4QyxDQUFDO0lBRUQseUJBQXlCO0lBQ3pCLElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUM7SUFDdEMsQ0FBQztJQUVELDBCQUEwQjtJQUMxQixJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxxQkFBcUI7SUFDckIsSUFBSSxhQUFhO1FBQ2YsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsWUFBWSxDQUFDO0lBQ2pELENBQUM7SUFFRCxvQkFBb0I7SUFDcEIsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsV0FBVyxDQUFDO0lBQ2hELENBQUM7SUFFRCxrREFBa0Q7SUFDbEQsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDOUMsQ0FBQztJQUVELGlEQUFpRDtJQUNqRCxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUNoRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLENBQUMsZUFBNEIsRUFBRSxjQUEyQixFQUFFLGFBQTJCO1FBQ3pGLHFCQUFxQjtRQUNyQixlQUFlLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxlQUFlLENBQUM7UUFFckMsNEJBQTRCO1FBQzVCLGNBQWMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV0RCwrRkFBK0Y7UUFDL0YsK0NBQStDO1FBQy9DLDZGQUE2RjtRQUM3RixJQUFJLGFBQWEsRUFBRSxDQUFDO1lBQ2xCLHVHQUF1RztZQUN2RyxhQUFhLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7WUFDMUMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLGFBQWEsQ0FBQztRQUM3QyxDQUFDO2FBQU0sQ0FBQztZQUNOLDJEQUEyRDtZQUMzRCxJQUFJLENBQUMscUJBQXFCLEdBQUcsY0FBYyxDQUFDO1FBQzlDLENBQUM7UUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxTQUFTLENBQUMsS0FBYTtRQUNyQixJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFDdkMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsU0FBUyxDQUFDLEtBQWE7UUFDckIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQ3hDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNpZ25hbCwgV3JpdGFibGVTaWduYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVmlld3BvcnRDbGFzc2VzIH0gZnJvbSAnLi4vdXRpbHMvY29tbW9uJztcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSB2aWV3cG9ydCBhZGFwdGVyLlxyXG4gKiBQcm92aWRlcyBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzIHRvIGludGVyYWN0IHdpdGggYSB2aWV3cG9ydCBhbmQgaXRzIGNvbnRlbnQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVmlld3BvcnRBZGFwdGVyIHtcclxuXHJcbiAgLyoqXHJcbiAgICogVmlld3BvcnQgbmF0aXZlIGVsZW1lbnRcclxuICAgKi9cclxuICBuYXRpdmVFbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICAvKipcclxuICAgKiBUaGUgZWxlbWVudCB0aGF0IHdyYXBzIHRoZSBjb250ZW50IGluc2lkZSB0aGUgdmlld3BvcnQsXHJcbiAgICogdXNlZCB0byBtZWFzdXJlIHRoZSBjb250ZW50IHNpemUgYW5kIG9ic2VydmUgaXRzIGNoYW5nZXMuXHJcbiAgICovXHJcbiAgY29udGVudFdyYXBwZXJFbGVtZW50OiBIVE1MRWxlbWVudDtcclxuXHJcbiAgLypcclxuICAgKiBBIHNpZ25hbCB0aGF0IGluZGljYXRlcyB3aGVuIHZpZXdwb3J0IGFkYXB0ZXIgaXMgaW5pdGlhbGl6ZWRcclxuICAgKi9cclxuICBpbml0aWFsaXplZDogV3JpdGFibGVTaWduYWw8Ym9vbGVhbj4gPSBzaWduYWwoZmFsc2UpO1xyXG5cclxuICAvKiogVmlld3BvcnQgY2xpZW50SGVpZ2h0ICovXHJcbiAgZ2V0IG9mZnNldEhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcbiAgfVxyXG5cclxuICAvKiogVmlld3BvcnQgY2xpZW50V2lkdGggKi9cclxuICBnZXQgb2Zmc2V0V2lkdGgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XHJcbiAgfVxyXG5cclxuICAvKiogVmlld3BvcnQgc2Nyb2xsVG9wICovXHJcbiAgZ2V0IHNjcm9sbFRvcCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5zY3JvbGxUb3A7XHJcbiAgfVxyXG5cclxuICAvKiogVmlld3BvcnQgc2Nyb2xsTGVmdCAqL1xyXG4gIGdldCBzY3JvbGxMZWZ0KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LnNjcm9sbExlZnQ7XHJcbiAgfVxyXG5cclxuICAvKiogQ29udGVudCBoZWlnaHQgKi9cclxuICBnZXQgY29udGVudEhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udGVudFdyYXBwZXJFbGVtZW50Lm9mZnNldEhlaWdodDtcclxuICB9XHJcblxyXG4gIC8qKiBDb250ZW50IHdpZHRoICovXHJcbiAgZ2V0IGNvbnRlbnRXaWR0aCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udGVudFdyYXBwZXJFbGVtZW50Lm9mZnNldFdpZHRoO1xyXG4gIH1cclxuXHJcbiAgLyoqIFRoZSByZW1haW5pbmcgdmVydGljYWwgc2Nyb2xsYWJsZSBkaXN0YW5jZS4gKi9cclxuICBnZXQgc2Nyb2xsTWF4WCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udGVudFdpZHRoIC0gdGhpcy5vZmZzZXRXaWR0aDtcclxuICB9XHJcblxyXG4gIC8qKiBUaGUgdmVydGljYWwgcmVtYWluaW5nIHNjcm9sbGFibGUgZGlzdGFuY2UgKi9cclxuICBnZXQgc2Nyb2xsTWF4WSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udGVudEhlaWdodCAtIHRoaXMub2Zmc2V0SGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSB2aWV3cG9ydFxyXG4gICAqL1xyXG4gIGluaXQodmlld3BvcnRFbGVtZW50OiBIVE1MRWxlbWVudCwgY29udGVudEVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzcGFjZXJFbGVtZW50PzogSFRNTEVsZW1lbnQpOiB2b2lkIHtcclxuICAgIC8vIEFkZCB2aWV3cG9ydCBjbGFzc1xyXG4gICAgdmlld3BvcnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoVmlld3BvcnRDbGFzc2VzLlZpZXdwb3J0KTtcclxuICAgIHRoaXMubmF0aXZlRWxlbWVudCA9IHZpZXdwb3J0RWxlbWVudDtcclxuXHJcbiAgICAvLyBBZGQgY29udGVudCB3cmFwcGVyIGNsYXNzXHJcbiAgICBjb250ZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFZpZXdwb3J0Q2xhc3Nlcy5Db250ZW50KTtcclxuXHJcbiAgICAvLyBXaGVuIGludGVncmF0aW5nIHRoZSBzY3JvbGxiYXIgd2l0aCB2aXJ0dWFsIHNjcm9sbCwgdGhlIGNvbnRlbnQgd3JhcHBlciB3aWxsIGhhdmUgZmFrZSBzaXplLFxyXG4gICAgLy8gYW5kIGEgc3BhY2VyIGVsZW1lbnQgd2lsbCBoYXZlIHRoZSByZWFsIHNpemVcclxuICAgIC8vIFRoZXJlZm9yZSwgaWYgc3BhY2VFbGVtZW50IGlzIHByb3ZpZGVkLCBpdCB3aWxsIGJlIG9ic2VydmVkIGluc3RlYWQgb2YgdGhlIGNvbnRlbnQgd3JhcHBlclxyXG4gICAgaWYgKHNwYWNlckVsZW1lbnQpIHtcclxuICAgICAgLy8gU2V0IHJlbGF0aXZlIHBvc2l0aW9uIG9uIHRoZSBzcGFjZXIgZWxlbWVudCB0byBlbmFibGUgdGhlIGZ1bmN0aW9uYWxpdHkgb2Ygc3RpY2t5IGZvciB0aGUgc2Nyb2xsYmFyc1xyXG4gICAgICBzcGFjZXJFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcclxuICAgICAgdGhpcy5jb250ZW50V3JhcHBlckVsZW1lbnQgPSBzcGFjZXJFbGVtZW50O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gSWYgc3BhY2VyIGlzIG5vdCBwcm92aWRlZCwgc2V0IGl0IGFzIHRoZSBjb250ZW50IHdyYXBwZXJcclxuICAgICAgdGhpcy5jb250ZW50V3JhcHBlckVsZW1lbnQgPSBjb250ZW50RWxlbWVudDtcclxuICAgIH1cclxuICAgIHRoaXMuaW5pdGlhbGl6ZWQuc2V0KHRydWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2Nyb2xscyB0aGUgdmlld3BvcnQgdmVydGljYWxseSB0byB0aGUgc3BlY2lmaWVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIHNjcm9sbFlUbyh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsVG9wID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTY3JvbGxzIHRoZSB2aWV3cG9ydCBob3Jpem9udGFsbHkgdG8gdGhlIHNwZWNpZmllZCB2YWx1ZS5cclxuICAgKi9cclxuICBzY3JvbGxYVG8odmFsdWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5uYXRpdmVFbGVtZW50LnNjcm9sbExlZnQgPSB2YWx1ZTtcclxuICB9XHJcbn1cclxuIl19