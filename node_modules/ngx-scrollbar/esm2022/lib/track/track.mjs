import { Directive, effect } from '@angular/core';
import { fromPromise } from 'rxjs/internal/observable/innerFrom';
import { TrackAdapter } from './track-adapter';
import * as i0 from "@angular/core";
export class TrackXDirective extends TrackAdapter {
    get viewportScrollSize() {
        return this.cmp.viewport.contentWidth;
    }
    constructor() {
        effect(() => {
            if (this.cmp.direction() === 'rtl') {
                this.getCurrPosition = () => {
                    const offset = this.viewportScrollSize - this.viewportSize - this.control.viewportScrollOffset;
                    return offset * this.size / this.viewportScrollSize;
                };
                this.getScrollDirection = (position) => {
                    return position < this.getCurrPosition() ? 'forward' : 'backward';
                };
            }
            else {
                this.getCurrPosition = () => {
                    return this.control.viewportScrollOffset * this.size / this.viewportScrollSize;
                };
                this.getScrollDirection = (position) => {
                    return position > this.getCurrPosition() ? 'forward' : 'backward';
                };
            }
        });
        super();
        this.cssLengthProperty = '--track-x-length';
    }
    scrollTo(start) {
        return fromPromise(this.cmp.scrollTo({ start, duration: this.cmp.trackScrollDuration }));
    }
    getScrollForwardStep() {
        return this.control.viewportScrollOffset + this.viewportSize;
    }
    getScrollBackwardStep() {
        return this.control.viewportScrollOffset - this.viewportSize;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: TrackXDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.2", type: TrackXDirective, isStandalone: true, selector: "[scrollbarTrackX]", providers: [{ provide: TrackAdapter, useExisting: TrackXDirective }], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: TrackXDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[scrollbarTrackX]',
                    providers: [{ provide: TrackAdapter, useExisting: TrackXDirective }]
                }]
        }], ctorParameters: () => [] });
export class TrackYDirective extends TrackAdapter {
    constructor() {
        super(...arguments);
        this.cssLengthProperty = '--track-y-length';
    }
    get viewportScrollSize() {
        return this.cmp.viewport.contentHeight;
    }
    getCurrPosition() {
        return this.control.viewportScrollOffset * this.size / this.viewportScrollSize;
    }
    getScrollDirection(position) {
        return position > this.getCurrPosition() ? 'forward' : 'backward';
    }
    scrollTo(top) {
        return fromPromise(this.cmp.scrollTo({ top, duration: this.cmp.trackScrollDuration }));
    }
    getScrollForwardStep() {
        return this.control.viewportScrollOffset + this.viewportSize;
    }
    getScrollBackwardStep() {
        return this.control.viewportScrollOffset - this.viewportSize;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: TrackYDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.2", type: TrackYDirective, isStandalone: true, selector: "[scrollbarTrackY]", providers: [{ provide: TrackAdapter, useExisting: TrackYDirective }], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: TrackYDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[scrollbarTrackY]',
                    providers: [{ provide: TrackAdapter, useExisting: TrackYDirective }]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3NyYy9saWIvdHJhY2svdHJhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFPL0MsTUFBTSxPQUFPLGVBQWdCLFNBQVEsWUFBWTtJQUkvQyxJQUFjLGtCQUFrQjtRQUM5QixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQztJQUN4QyxDQUFDO0lBTUQ7UUFDRSxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1YsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxLQUFLLEtBQUssRUFBRSxDQUFDO2dCQUNuQyxJQUFJLENBQUMsZUFBZSxHQUFHLEdBQVcsRUFBRTtvQkFDbEMsTUFBTSxNQUFNLEdBQVcsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztvQkFDdkcsT0FBTyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUM7Z0JBQ3RELENBQUMsQ0FBQztnQkFDRixJQUFJLENBQUMsa0JBQWtCLEdBQUcsQ0FBQyxRQUFnQixFQUEwQixFQUFFO29CQUNyRSxPQUFPLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO2dCQUNwRSxDQUFDLENBQUM7WUFDSixDQUFDO2lCQUFNLENBQUM7Z0JBQ04sSUFBSSxDQUFDLGVBQWUsR0FBRyxH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LEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxpQkFBaUIsRUFBRSxDQUFDO2lCQUNyRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgZWZmZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZnJvbVByb21pc2UgfSBmcm9tICdyeGpzL2ludGVybmFsL29ic2VydmFibGUvaW5uZXJGcm9tJztcclxuaW1wb3J0IHsgVHJhY2tBZGFwdGVyIH0gZnJvbSAnLi90cmFjay1hZGFwdGVyJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHN0YW5kYWxvbmU6IHRydWUsXHJcbiAgc2VsZWN0b3I6ICdbc2Nyb2xsYmFyVHJhY2tYXScsXHJcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBUcmFja0FkYXB0ZXIsIHVzZUV4aXN0aW5nOiBUcmFja1hEaXJlY3RpdmUgfV1cclxufSlcclxuZXhwb3J0IGNsYXNzIFRyYWNrWERpcmVjdGl2ZSBleHRlbmRzIFRyYWNrQWRhcHRlciB7XHJcblxyXG4gIHByb3RlY3RlZCByZWFkb25seSBjc3NMZW5ndGhQcm9wZXJ0eTogc3RyaW5nID0gJy0tdHJhY2steC1sZW5ndGgnO1xyXG5cclxuICBwcm90ZWN0ZWQgZ2V0IHZpZXdwb3J0U2Nyb2xsU2l6ZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY21wLnZpZXdwb3J0LmNvbnRlbnRXaWR0aDtcclxuICB9XHJcblxyXG4gIGdldEN1cnJQb3NpdGlvbjogKCkgPT4gbnVtYmVyO1xyXG5cclxuICBnZXRTY3JvbGxEaXJlY3Rpb246IChwb3NpdGlvbjogbnVtYmVyKSA9PiAnZm9yd2FyZCcgfCAnYmFja3dhcmQnO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIGVmZmVjdCgoKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLmNtcC5kaXJlY3Rpb24oKSA9PT0gJ3J0bCcpIHtcclxuICAgICAgICB0aGlzLmdldEN1cnJQb3NpdGlvbiA9ICgpOiBudW1iZXIgPT4ge1xyXG4gICAgICAgICAgY29uc3Qgb2Zmc2V0OiBudW1iZXIgPSB0aGlzLnZpZXdwb3J0U2Nyb2xsU2l6ZSAtIHRoaXMudmlld3BvcnRTaXplIC0gdGhpcy5jb250cm9sLnZpZXdwb3J0U2Nyb2xsT2Zmc2V0O1xyXG4gICAgICAgICAgcmV0dXJuIG9mZnNldCAqIHRoaXMuc2l6ZSAvIHRoaXMudmlld3BvcnRTY3JvbGxTaXplO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5nZXRTY3JvbGxEaXJlY3Rpb24gPSAocG9zaXRpb246IG51bWJlcik6ICdmb3J3YXJkJyB8ICdiYWNrd2FyZCcgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHBvc2l0aW9uIDwgdGhpcy5nZXRDdXJyUG9zaXRpb24oKSA/ICdmb3J3YXJkJyA6ICdiYWNrd2FyZCc7XHJcbiAgICAgICAgfTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmdldEN1cnJQb3NpdGlvbiA9ICgpOiBudW1iZXIgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuY29udHJvbC52aWV3cG9ydFNjcm9sbE9mZnNldCAqIHRoaXMuc2l6ZSAvIHRoaXMudmlld3BvcnRTY3JvbGxTaXplXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmdldFNjcm9sbERpcmVjdGlvbiA9IChwb3NpdGlvbjogbnVtYmVyKTogJ2ZvcndhcmQnIHwgJ2JhY2t3YXJkJyA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gcG9zaXRpb24gPiB0aGlzLmdldEN1cnJQb3NpdGlvbigpID8gJ2ZvcndhcmQnIDogJ2JhY2t3YXJkJztcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHN1cGVyKCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgc2Nyb2xsVG8oc3RhcnQ6IG51bWJlcik6IE9ic2VydmFibGU8dm9pZD4ge1xyXG4gICAgcmV0dXJuIGZyb21Qcm9taXNlKHRoaXMuY21wLnNjcm9sbFRvKHsgc3RhcnQsIGR1cmF0aW9uOiB0aGlzLmNtcC50cmFja1Njcm9sbER1cmF0aW9uIH0pKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBnZXRTY3JvbGxGb3J3YXJkU3RlcCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udHJvbC52aWV3cG9ydFNjcm9sbE9mZnNldCArIHRoaXMudmlld3BvcnRTaXplO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGdldFNjcm9sbEJhY2t3YXJkU3RlcCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udHJvbC52aWV3cG9ydFNjcm9sbE9mZnNldCAtIHRoaXMudmlld3BvcnRTaXplO1xyXG4gIH1cclxufVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcclxuICBzZWxlY3RvcjogJ1tzY3JvbGxiYXJUcmFja1ldJyxcclxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IFRyYWNrQWRhcHRlciwgdXNlRXhpc3Rpbmc6IFRyYWNrWURpcmVjdGl2ZSB9XVxyXG59KVxyXG5leHBvcnQgY2xhc3MgVHJhY2tZRGlyZWN0aXZlIGV4dGVuZHMgVHJhY2tBZGFwdGVyIHtcclxuXHJcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGNzc0xlbmd0aFByb3BlcnR5OiBzdHJpbmcgPSAnLS10cmFjay15LWxlbmd0aCc7XHJcblxyXG4gIHByb3RlY3RlZCBnZXQgdmlld3BvcnRTY3JvbGxTaXplKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jbXAudmlld3BvcnQuY29udGVudEhlaWdodDtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBnZXRDdXJyUG9zaXRpb24oKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRyb2wudmlld3BvcnRTY3JvbGxPZmZzZXQgKiB0aGlzLnNpemUgLyB0aGlzLnZpZXdwb3J0U2Nyb2xsU2l6ZTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBnZXRTY3JvbGxEaXJlY3Rpb24ocG9zaXRpb246IG51bWJlcik6ICdmb3J3YXJkJyB8ICdiYWNrd2FyZCcge1xyXG4gICAgcmV0dXJuIHBvc2l0aW9uID4gdGhpcy5nZXRDdXJyUG9zaXRpb24oKSA/ICdmb3J3YXJkJyA6ICdiYWNrd2FyZCc7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgc2Nyb2xsVG8odG9wOiBudW1iZXIpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcclxuICAgIHJldHVybiBmcm9tUHJvbWlzZSh0aGlzLmNtcC5zY3JvbGxUbyh7IHRvcCwgZHVyYXRpb246IHRoaXMuY21wLnRyYWNrU2Nyb2xsRHVyYXRpb24gfSkpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGdldFNjcm9sbEZvcndhcmRTdGVwKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250cm9sLnZpZXdwb3J0U2Nyb2xsT2Zmc2V0ICsgdGhpcy52aWV3cG9ydFNpemU7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgZ2V0U2Nyb2xsQmFja3dhcmRTdGVwKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250cm9sLnZpZXdwb3J0U2Nyb2xsT2Zmc2V0IC0gdGhpcy52aWV3cG9ydFNpemU7XHJcbiAgfVxyXG59XHJcbiJdfQ==