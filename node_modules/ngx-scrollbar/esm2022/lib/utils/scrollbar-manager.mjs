import { Injectable, inject, signal, PLATFORM_ID } from '@angular/core';
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { NG_SCROLLBAR_POLYFILL } from '../ng-scrollbar.model';
import * as i0 from "@angular/core";
// This CDN link for a modified version of the polyfill to fix firefox bug https://github.com/MurhafSousli/ngx-scrollbar/issues/615
const scrollTimelinePolyfillUrl = 'https://cdn.statically.io/gist/MurhafSousli/c852b6a672069396953f06ddd4b64620/raw/ef55db72e2abb7bc002ed79f4ad4cf408bfdb72f/scroll-timeline-lite.js';
export class ScrollbarManager {
    constructor() {
        this.isBrowser = isPlatformBrowser(inject(PLATFORM_ID));
        this._polyfillUrl = inject(NG_SCROLLBAR_POLYFILL, { optional: true }) || scrollTimelinePolyfillUrl;
        this.document = inject(DOCUMENT);
        this.window = this.document.defaultView;
        this.scrollTimelinePolyfill = signal(null);
        if (this.isBrowser && (!this.window['ScrollTimeline'] || !CSS.supports('animation-timeline', 'scroll()'))) {
            this.initPolyfill();
        }
    }
    async initPolyfill() {
        try {
            // Create a script element
            const script = this.document.createElement('script');
            script.src = this._polyfillUrl;
            // Wait for the script to load
            await new Promise((resolve, reject) => {
                script.onload = resolve;
                script.onerror = reject;
                this.document.head.appendChild(script);
            });
            // Once loaded, access and execute the function attached to the window object
            if (this.window['ScrollTimeline']) {
                this.scrollTimelinePolyfill.set(this.window['ScrollTimeline']);
            }
            else {
                console.error('[NgScrollbar]: ScrollTimeline is not attached to the window object.');
            }
        }
        catch (error) {
            console.error('[NgScrollbar]: Error loading ScrollTimeline script:', error);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: ScrollbarManager, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: ScrollbarManager, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: ScrollbarManager, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3NyYy9saWIvdXRpbHMvc2Nyb2xsYmFyLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFrQixXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEYsT0FBTyxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDOztBQUc5RCxtSUFBbUk7QUFDbkksTUFBTSx5QkFBeUIsR0FBVyxtSkFBbUosQ0FBQztBQUc5TCxNQUFNLE9BQU8sZ0JBQWdCO0lBWTNCO1FBVmlCLGNBQVMsR0FBWSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUVwRSxpQkFBWSxHQUFXLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLHlCQUF5QixDQUFDO1FBRXRHLGFBQVEsR0FBYSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFdEMsV0FBTSxHQUFXLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO1FBRTNDLDJCQUFzQixHQUF1QyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFHakYsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLG9CQUFvQixFQUFFLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUMxRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdEIsQ0FBQztJQUNILENBQUM7SUFFRCxLQUFLLENBQUMsWUFBWTtRQUNoQixJQUFJLENBQUM7WUFDSCwwQkFBMEI7WUFDMUIsTUFBTSxNQUFNLEdBQXNCLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3hFLE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUUvQiw4QkFBOEI7WUFDOUIsTUFBTSxJQUFJLE9BQU8sQ0FBUSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDM0MsTUFBTSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUM7Z0JBQ3hCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO2dCQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDekMsQ0FBQyxDQUFDLENBQUM7WUFFSCw2RUFBNkU7WUFDN0UsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQztnQkFDbEMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztZQUNqRSxDQUFDO2lCQUFNLENBQUM7Z0JBQ04sT0FBTyxDQUFDLEtBQUssQ0FBQyxxRUFBcUUsQ0FBQyxDQUFDO1lBQ3ZGLENBQUM7UUFDSCxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMscURBQXFELEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDOUUsQ0FBQztJQUNILENBQUM7OEdBeENVLGdCQUFnQjtrSEFBaEIsZ0JBQWdCLGNBREgsTUFBTTs7MkZBQ25CLGdCQUFnQjtrQkFENUIsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBpbmplY3QsIHNpZ25hbCwgV3JpdGFibGVTaWduYWwsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERPQ1VNRU5ULCBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IE5HX1NDUk9MTEJBUl9QT0xZRklMTCB9IGZyb20gJy4uL25nLXNjcm9sbGJhci5tb2RlbCc7XHJcbmltcG9ydCB7IFNjcm9sbFRpbWVsaW5lRnVuYyB9IGZyb20gJy4vY29tbW9uJztcclxuXHJcbi8vIFRoaXMgQ0ROIGxpbmsgZm9yIGEgbW9kaWZpZWQgdmVyc2lvbiBvZiB0aGUgcG9seWZpbGwgdG8gZml4IGZpcmVmb3ggYnVnIGh0dHBzOi8vZ2l0aHViLmNvbS9NdXJoYWZTb3VzbGkvbmd4LXNjcm9sbGJhci9pc3N1ZXMvNjE1XHJcbmNvbnN0IHNjcm9sbFRpbWVsaW5lUG9seWZpbGxVcmw6IHN0cmluZyA9ICdodHRwczovL2Nkbi5zdGF0aWNhbGx5LmlvL2dpc3QvTXVyaGFmU291c2xpL2M4NTJiNmE2NzIwNjkzOTY5NTNmMDZkZGQ0YjY0NjIwL3Jhdy9lZjU1ZGI3MmUyYWJiN2JjMDAyZWQ3OWY0YWQ0Y2Y0MDhiZmRiNzJmL3Njcm9sbC10aW1lbGluZS1saXRlLmpzJztcclxuXHJcbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXHJcbmV4cG9ydCBjbGFzcyBTY3JvbGxiYXJNYW5hZ2VyIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBpc0Jyb3dzZXI6IGJvb2xlYW4gPSBpc1BsYXRmb3JtQnJvd3NlcihpbmplY3QoUExBVEZPUk1fSUQpKTtcclxuXHJcbiAgcmVhZG9ubHkgX3BvbHlmaWxsVXJsOiBzdHJpbmcgPSBpbmplY3QoTkdfU0NST0xMQkFSX1BPTFlGSUxMLCB7IG9wdGlvbmFsOiB0cnVlIH0pIHx8IHNjcm9sbFRpbWVsaW5lUG9seWZpbGxVcmw7XHJcblxyXG4gIHJlYWRvbmx5IGRvY3VtZW50OiBEb2N1bWVudCA9IGluamVjdChET0NVTUVOVCk7XHJcblxyXG4gIHJlYWRvbmx5IHdpbmRvdzogV2luZG93ID0gdGhpcy5kb2N1bWVudC5kZWZhdWx0VmlldztcclxuXHJcbiAgcmVhZG9ubHkgc2Nyb2xsVGltZWxpbmVQb2x5ZmlsbDogV3JpdGFibGVTaWduYWw8U2Nyb2xsVGltZWxpbmVGdW5jPiA9IHNpZ25hbChudWxsKTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBpZiAodGhpcy5pc0Jyb3dzZXIgJiYgKCF0aGlzLndpbmRvd1snU2Nyb2xsVGltZWxpbmUnXSB8fCAhQ1NTLnN1cHBvcnRzKCdhbmltYXRpb24tdGltZWxpbmUnLCAnc2Nyb2xsKCknKSkpIHtcclxuICAgICAgdGhpcy5pbml0UG9seWZpbGwoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGluaXRQb2x5ZmlsbCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIENyZWF0ZSBhIHNjcmlwdCBlbGVtZW50XHJcbiAgICAgIGNvbnN0IHNjcmlwdDogSFRNTFNjcmlwdEVsZW1lbnQgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgICBzY3JpcHQuc3JjID0gdGhpcy5fcG9seWZpbGxVcmw7XHJcblxyXG4gICAgICAvLyBXYWl0IGZvciB0aGUgc2NyaXB0IHRvIGxvYWRcclxuICAgICAgYXdhaXQgbmV3IFByb21pc2U8RXZlbnQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBzY3JpcHQub25sb2FkID0gcmVzb2x2ZTtcclxuICAgICAgICBzY3JpcHQub25lcnJvciA9IHJlamVjdDtcclxuICAgICAgICB0aGlzLmRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBPbmNlIGxvYWRlZCwgYWNjZXNzIGFuZCBleGVjdXRlIHRoZSBmdW5jdGlvbiBhdHRhY2hlZCB0byB0aGUgd2luZG93IG9iamVjdFxyXG4gICAgICBpZiAodGhpcy53aW5kb3dbJ1Njcm9sbFRpbWVsaW5lJ10pIHtcclxuICAgICAgICB0aGlzLnNjcm9sbFRpbWVsaW5lUG9seWZpbGwuc2V0KHRoaXMud2luZG93WydTY3JvbGxUaW1lbGluZSddKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdbTmdTY3JvbGxiYXJdOiBTY3JvbGxUaW1lbGluZSBpcyBub3QgYXR0YWNoZWQgdG8gdGhlIHdpbmRvdyBvYmplY3QuJyk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tOZ1Njcm9sbGJhcl06IEVycm9yIGxvYWRpbmcgU2Nyb2xsVGltZWxpbmUgc2NyaXB0OicsIGVycm9yKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19