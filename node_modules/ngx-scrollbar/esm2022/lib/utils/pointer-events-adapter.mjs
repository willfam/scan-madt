import { Directive, effect, inject, ElementRef, NgZone } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NG_SCROLLBAR } from '../utils/scrollbar-base';
import { SCROLLBAR_CONTROL } from '../scrollbar/scrollbar-adapter';
import * as i0 from "@angular/core";
export class PointerEventsAdapter {
    constructor() {
        // Reference to the NgScrollbar component
        this.cmp = inject(NG_SCROLLBAR);
        // Reference to the Scrollbar control component
        this.control = inject(SCROLLBAR_CONTROL);
        // Reference to the Document element
        this.document = inject(DOCUMENT);
        // Reference to angular zone
        this.zone = inject(NgZone);
        // The native element of the directive
        this.nativeElement = inject((ElementRef)).nativeElement;
        effect((onCleanup) => {
            if (this.cmp.disableInteraction()) {
                this._pointerEventsSub?.unsubscribe();
            }
            else {
                this.zone.runOutsideAngular(() => {
                    this._pointerEventsSub = this.pointerEvents.subscribe();
                });
            }
            onCleanup(() => this._pointerEventsSub?.unsubscribe());
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: PointerEventsAdapter, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.2", type: PointerEventsAdapter, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: PointerEventsAdapter, decorators: [{
            type: Directive
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnRlci1ldmVudHMtYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zY3JvbGxiYXIvc3JjL2xpYi91dGlscy9wb2ludGVyLWV2ZW50cy1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUEyQixNQUFNLGVBQWUsQ0FBQztBQUN2RyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFM0MsT0FBTyxFQUFnQixZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsaUJBQWlCLEVBQW9CLE1BQU0sZ0NBQWdDLENBQUM7O0FBR3JGLE1BQU0sT0FBZ0Isb0JBQW9CO0lBc0J4QztRQXBCQSx5Q0FBeUM7UUFDdEIsUUFBRyxHQUFpQixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFNUQsK0NBQStDO1FBQzVCLFlBQU8sR0FBcUIsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFFekUsb0NBQW9DO1FBQ2pCLGFBQVEsR0FBYSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFekQsNEJBQTRCO1FBQ1QsU0FBSSxHQUFXLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVqRCxzQ0FBc0M7UUFDN0Isa0JBQWEsR0FBZ0IsTUFBTSxDQUFDLENBQUEsVUFBdUIsQ0FBQSxDQUFDLENBQUMsYUFBYSxDQUFDO1FBUWxGLE1BQU0sQ0FBQyxDQUFDLFNBQWtDLEVBQUUsRUFBRTtZQUM1QyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxDQUFDO2dCQUNsQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsV0FBVyxFQUFFLENBQUM7WUFDeEMsQ0FBQztpQkFBTSxDQUFDO2dCQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO29CQUMvQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztnQkFDMUQsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDO1lBRUQsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs4R0FsQ21CLG9CQUFvQjtrR0FBcEIsb0JBQW9COzsyRkFBcEIsb0JBQW9CO2tCQUR6QyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBlZmZlY3QsIGluamVjdCwgRWxlbWVudFJlZiwgTmdab25lLCBFZmZlY3RDbGVhbnVwUmVnaXN0ZXJGbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBfTmdTY3JvbGxiYXIsIE5HX1NDUk9MTEJBUiB9IGZyb20gJy4uL3V0aWxzL3Njcm9sbGJhci1iYXNlJztcclxuaW1wb3J0IHsgU0NST0xMQkFSX0NPTlRST0wsIFNjcm9sbGJhckFkYXB0ZXIgfSBmcm9tICcuLi9zY3JvbGxiYXIvc2Nyb2xsYmFyLWFkYXB0ZXInO1xyXG5cclxuQERpcmVjdGl2ZSgpXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQb2ludGVyRXZlbnRzQWRhcHRlciB7XHJcblxyXG4gIC8vIFJlZmVyZW5jZSB0byB0aGUgTmdTY3JvbGxiYXIgY29tcG9uZW50XHJcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGNtcDogX05nU2Nyb2xsYmFyID0gaW5qZWN0KE5HX1NDUk9MTEJBUik7XHJcblxyXG4gIC8vIFJlZmVyZW5jZSB0byB0aGUgU2Nyb2xsYmFyIGNvbnRyb2wgY29tcG9uZW50XHJcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGNvbnRyb2w6IFNjcm9sbGJhckFkYXB0ZXIgPSBpbmplY3QoU0NST0xMQkFSX0NPTlRST0wpO1xyXG5cclxuICAvLyBSZWZlcmVuY2UgdG8gdGhlIERvY3VtZW50IGVsZW1lbnRcclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgZG9jdW1lbnQ6IERvY3VtZW50ID0gaW5qZWN0KERPQ1VNRU5UKTtcclxuXHJcbiAgLy8gUmVmZXJlbmNlIHRvIGFuZ3VsYXIgem9uZVxyXG4gIHByb3RlY3RlZCByZWFkb25seSB6b25lOiBOZ1pvbmUgPSBpbmplY3QoTmdab25lKTtcclxuXHJcbiAgLy8gVGhlIG5hdGl2ZSBlbGVtZW50IG9mIHRoZSBkaXJlY3RpdmVcclxuICByZWFkb25seSBuYXRpdmVFbGVtZW50OiBIVE1MRWxlbWVudCA9IGluamVjdChFbGVtZW50UmVmPEhUTUxFbGVtZW50PikubmF0aXZlRWxlbWVudDtcclxuXHJcbiAgLy8gUG9pbnRlciBldmVudHMgc3Vic2NyaXB0aW9uIChtYWRlIHB1YmxpYyBmb3IgdGVzdGluZyBwdXJwb3NlKVxyXG4gIF9wb2ludGVyRXZlbnRzU3ViOiBTdWJzY3JpcHRpb247XHJcblxyXG4gIGFic3RyYWN0IGdldCBwb2ludGVyRXZlbnRzKCk6IE9ic2VydmFibGU8UG9pbnRlckV2ZW50PjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBlZmZlY3QoKG9uQ2xlYW51cDogRWZmZWN0Q2xlYW51cFJlZ2lzdGVyRm4pID0+IHtcclxuICAgICAgaWYgKHRoaXMuY21wLmRpc2FibGVJbnRlcmFjdGlvbigpKSB7XHJcbiAgICAgICAgdGhpcy5fcG9pbnRlckV2ZW50c1N1Yj8udW5zdWJzY3JpYmUoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5fcG9pbnRlckV2ZW50c1N1YiA9IHRoaXMucG9pbnRlckV2ZW50cy5zdWJzY3JpYmUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgb25DbGVhbnVwKCgpID0+IHRoaXMuX3BvaW50ZXJFdmVudHNTdWI/LnVuc3Vic2NyaWJlKCkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==