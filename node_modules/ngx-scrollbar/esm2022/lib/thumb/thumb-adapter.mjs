import { Directive, inject, effect } from '@angular/core';
import { of, fromEvent, map, takeUntil, tap, switchMap } from 'rxjs';
import { stopPropagation, enableSelection, preventSelection } from '../utils/common';
import { ScrollbarManager } from '../utils/scrollbar-manager';
import { TrackAdapter } from '../track/track-adapter';
import { PointerEventsAdapter } from '../utils/pointer-events-adapter';
import * as i0 from "@angular/core";
export class ThumbAdapter extends PointerEventsAdapter {
    // Returns thumb size
    get size() {
        return this.nativeElement[this.control.sizeProperty];
    }
    // The maximum space available for scrolling.
    get trackMax() {
        return this.track.size - this.size;
    }
    /**
     * Stream that emits the 'scrollTo' position when a scrollbar thumb element is dragged
     * This function is called by thumb drag event using viewport or scrollbar pointer events
     */
    get pointerEvents() {
        return fromEvent(this.nativeElement, 'pointerdown').pipe(stopPropagation(), preventSelection(this.document), switchMap((e) => {
            let startTrackMax;
            let startScrollMax;
            const dragStart = of(e).pipe(tap(() => {
                // Capture scrollMax and trackMax once
                startTrackMax = this.trackMax;
                startScrollMax = this.control.viewportScrollMax;
                this.setDragging(this.control.axis);
            }));
            const dragging = fromEvent(this.document, 'pointermove').pipe(stopPropagation());
            const dragEnd = fromEvent(this.document, 'pointerup', { capture: true }).pipe(stopPropagation(), enableSelection(this.document), tap(() => this.setDragging('none')));
            return dragStart.pipe(map((startEvent) => startEvent[this.control.offsetProperty]), switchMap((startOffset) => dragging.pipe(map((moveEvent) => moveEvent[this.control.clientProperty]), 
            // Calculate how far the pointer is from the top/left of the scrollbar (minus the dragOffset).
            map((moveClient) => moveClient - this.track.offset), map((trackRelativeOffset) => startScrollMax * (trackRelativeOffset - startOffset) / startTrackMax), tap((scrollPosition) => this.control.instantScrollTo(scrollPosition, startScrollMax)), takeUntil(dragEnd))));
        }));
    }
    constructor() {
        effect(() => {
            const script = this.manager.scrollTimelinePolyfill();
            if (script && !this._animation) {
                this._animation = startPolyfill(script, this.nativeElement, this.cmp.viewport.nativeElement, this.control.axis);
            }
        });
        super();
        this.manager = inject(ScrollbarManager);
        this.track = inject(TrackAdapter);
    }
    setDragging(value) {
        this.zone.run(() => this.cmp.dragging.set(value));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: ThumbAdapter, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.2", type: ThumbAdapter, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: ThumbAdapter, decorators: [{
            type: Directive
        }], ctorParameters: () => [] });
function startPolyfill(ScrollTimeline, element, source, axis) {
    return element.animate({
        translate: [
            'var(--_scrollbar-thumb-transform-from)',
            'var(--_scrollbar-thumb-transform-to)'
        ]
    }, {
        fill: 'both',
        easing: 'linear',
        timeline: new ScrollTimeline({ source, axis })
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh1bWItYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zY3JvbGxiYXIvc3JjL2xpYi90aHVtYi90aHVtYi1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRCxPQUFPLEVBQWMsRUFBRSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakYsT0FBTyxFQUdMLGVBQWUsRUFDZixlQUFlLEVBQ2YsZ0JBQWdCLEVBQ2pCLE1BQU0saUJBQWlCLENBQUM7QUFDekIsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOztBQUd2RSxNQUFNLE9BQWdCLFlBQWEsU0FBUSxvQkFBb0I7SUFTN0QscUJBQXFCO0lBQ3JCLElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCw2Q0FBNkM7SUFDN0MsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLGFBQWE7UUFDZixPQUFPLFNBQVMsQ0FBZSxJQUFJLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FDcEUsZUFBZSxFQUFFLEVBQ2pCLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFDL0IsU0FB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R0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNwRCxDQUFDOzhHQTNFbUIsWUFBWTtrR0FBWixZQUFZOzsyRkFBWixZQUFZO2tCQURqQyxTQUFTOztBQStFVixTQUFTLGFBQWEsQ0FBQyxjQUFrQyxFQUFFLE9BQW9CLEVBQUUsTUFBbUIsRUFBRSxJQUFlO0lBQ25ILE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FDcEI7UUFDRSxTQUFTLEVBQUU7WUFDVCx3Q0FBd0M7WUFDeEMsc0NBQXNDO1NBQ3ZDO0tBQ0YsRUFDRDtRQUNFLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLFFBQVE7UUFDaEIsUUFBUSxFQUFFLElBQUksY0FBYyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO0tBQ3BDLENBQ2IsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIGluamVjdCwgZWZmZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mLCBmcm9tRXZlbnQsIG1hcCwgdGFrZVVudGlsLCB0YXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge1xyXG4gIFNjcm9sbGJhckRyYWdnaW5nLFxyXG4gIFNjcm9sbFRpbWVsaW5lRnVuYyxcclxuICBzdG9wUHJvcGFnYXRpb24sXHJcbiAgZW5hYmxlU2VsZWN0aW9uLFxyXG4gIHByZXZlbnRTZWxlY3Rpb25cclxufSBmcm9tICcuLi91dGlscy9jb21tb24nO1xyXG5pbXBvcnQgeyBTY3JvbGxiYXJNYW5hZ2VyIH0gZnJvbSAnLi4vdXRpbHMvc2Nyb2xsYmFyLW1hbmFnZXInO1xyXG5pbXBvcnQgeyBUcmFja0FkYXB0ZXIgfSBmcm9tICcuLi90cmFjay90cmFjay1hZGFwdGVyJztcclxuaW1wb3J0IHsgUG9pbnRlckV2ZW50c0FkYXB0ZXIgfSBmcm9tICcuLi91dGlscy9wb2ludGVyLWV2ZW50cy1hZGFwdGVyJztcclxuXHJcbkBEaXJlY3RpdmUoKVxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGh1bWJBZGFwdGVyIGV4dGVuZHMgUG9pbnRlckV2ZW50c0FkYXB0ZXIge1xyXG5cclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgbWFuYWdlcjogU2Nyb2xsYmFyTWFuYWdlciA9IGluamVjdChTY3JvbGxiYXJNYW5hZ2VyKTtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSB0cmFjazogVHJhY2tBZGFwdGVyID0gaW5qZWN0KFRyYWNrQWRhcHRlcik7XHJcblxyXG4gIC8vIFRoZSBhbmltYXRpb24gcmVmZXJlbmNlIHVzZWQgZm9yIGVuYWJsaW5nIHRoZSBwb2x5ZmlsbCBvbiBTYWZhcmkgYW5kIEZpcmVmb3guXHJcbiAgX2FuaW1hdGlvbjogQW5pbWF0aW9uO1xyXG5cclxuICAvLyBSZXR1cm5zIHRodW1iIHNpemVcclxuICBnZXQgc2l6ZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudFt0aGlzLmNvbnRyb2wuc2l6ZVByb3BlcnR5XTtcclxuICB9XHJcblxyXG4gIC8vIFRoZSBtYXhpbXVtIHNwYWNlIGF2YWlsYWJsZSBmb3Igc2Nyb2xsaW5nLlxyXG4gIGdldCB0cmFja01heCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMudHJhY2suc2l6ZSAtIHRoaXMuc2l6ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0cmVhbSB0aGF0IGVtaXRzIHRoZSAnc2Nyb2xsVG8nIHBvc2l0aW9uIHdoZW4gYSBzY3JvbGxiYXIgdGh1bWIgZWxlbWVudCBpcyBkcmFnZ2VkXHJcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYnkgdGh1bWIgZHJhZyBldmVudCB1c2luZyB2aWV3cG9ydCBvciBzY3JvbGxiYXIgcG9pbnRlciBldmVudHNcclxuICAgKi9cclxuICBnZXQgcG9pbnRlckV2ZW50cygpOiBPYnNlcnZhYmxlPFBvaW50ZXJFdmVudD4ge1xyXG4gICAgcmV0dXJuIGZyb21FdmVudDxQb2ludGVyRXZlbnQ+KHRoaXMubmF0aXZlRWxlbWVudCwgJ3BvaW50ZXJkb3duJykucGlwZShcclxuICAgICAgc3RvcFByb3BhZ2F0aW9uKCksXHJcbiAgICAgIHByZXZlbnRTZWxlY3Rpb24odGhpcy5kb2N1bWVudCksXHJcbiAgICAgIHN3aXRjaE1hcCgoZTogUG9pbnRlckV2ZW50KSA9PiB7XHJcbiAgICAgICAgbGV0IHN0YXJ0VHJhY2tNYXg6IG51bWJlcjtcclxuICAgICAgICBsZXQgc3RhcnRTY3JvbGxNYXg6IG51bWJlcjtcclxuXHJcbiAgICAgICAgY29uc3QgZHJhZ1N0YXJ0OiBPYnNlcnZhYmxlPFBvaW50ZXJFdmVudD4gPSBvZjxQb2ludGVyRXZlbnQ+KGUpLnBpcGUoXHJcbiAgICAgICAgICB0YXAoKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBDYXB0dXJlIHNjcm9sbE1heCBhbmQgdHJhY2tNYXggb25jZVxyXG4gICAgICAgICAgICBzdGFydFRyYWNrTWF4ID0gdGhpcy50cmFja01heDtcclxuICAgICAgICAgICAgc3RhcnRTY3JvbGxNYXggPSB0aGlzLmNvbnRyb2wudmlld3BvcnRTY3JvbGxNYXg7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RHJhZ2dpbmcodGhpcy5jb250cm9sLmF4aXMpO1xyXG4gICAgICAgICAgfSksXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgY29uc3QgZHJhZ2dpbmc6IE9ic2VydmFibGU8UG9pbnRlckV2ZW50PiA9IGZyb21FdmVudDxQb2ludGVyRXZlbnQ+KHRoaXMuZG9jdW1lbnQsICdwb2ludGVybW92ZScpLnBpcGUoc3RvcFByb3BhZ2F0aW9uKCkpO1xyXG5cclxuICAgICAgICBjb25zdCBkcmFnRW5kOiBPYnNlcnZhYmxlPFBvaW50ZXJFdmVudD4gPSBmcm9tRXZlbnQ8UG9pbnRlckV2ZW50Pih0aGlzLmRvY3VtZW50LCAncG9pbnRlcnVwJywgeyBjYXB0dXJlOiB0cnVlIH0pLnBpcGUoXHJcbiAgICAgICAgICBzdG9wUHJvcGFnYXRpb24oKSxcclxuICAgICAgICAgIGVuYWJsZVNlbGVjdGlvbih0aGlzLmRvY3VtZW50KSxcclxuICAgICAgICAgIHRhcCgoKSA9PiB0aGlzLnNldERyYWdnaW5nKCdub25lJykpXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRyYWdTdGFydC5waXBlKFxyXG4gICAgICAgICAgbWFwKChzdGFydEV2ZW50OiBQb2ludGVyRXZlbnQpID0+IHN0YXJ0RXZlbnRbdGhpcy5jb250cm9sLm9mZnNldFByb3BlcnR5XSksXHJcbiAgICAgICAgICBzd2l0Y2hNYXAoKHN0YXJ0T2Zmc2V0OiBudW1iZXIpID0+IGRyYWdnaW5nLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcCgobW92ZUV2ZW50OiBQb2ludGVyRXZlbnQpID0+IG1vdmVFdmVudFt0aGlzLmNvbnRyb2wuY2xpZW50UHJvcGVydHldKSxcclxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGhvdyBmYXIgdGhlIHBvaW50ZXIgaXMgZnJvbSB0aGUgdG9wL2xlZnQgb2YgdGhlIHNjcm9sbGJhciAobWludXMgdGhlIGRyYWdPZmZzZXQpLlxyXG4gICAgICAgICAgICBtYXAoKG1vdmVDbGllbnQ6IG51bWJlcikgPT4gbW92ZUNsaWVudCAtIHRoaXMudHJhY2sub2Zmc2V0KSxcclxuICAgICAgICAgICAgbWFwKCh0cmFja1JlbGF0aXZlT2Zmc2V0OiBudW1iZXIpID0+IHN0YXJ0U2Nyb2xsTWF4ICogKHRyYWNrUmVsYXRpdmVPZmZzZXQgLSBzdGFydE9mZnNldCkgLyBzdGFydFRyYWNrTWF4KSxcclxuICAgICAgICAgICAgdGFwKChzY3JvbGxQb3NpdGlvbjogbnVtYmVyKSA9PiB0aGlzLmNvbnRyb2wuaW5zdGFudFNjcm9sbFRvKHNjcm9sbFBvc2l0aW9uLCBzdGFydFNjcm9sbE1heCkpLFxyXG4gICAgICAgICAgICB0YWtlVW50aWwoZHJhZ0VuZClcclxuICAgICAgICAgICkgYXMgT2JzZXJ2YWJsZTxQb2ludGVyRXZlbnQ+KVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBlZmZlY3QoKCkgPT4ge1xyXG4gICAgICBjb25zdCBzY3JpcHQ6IFNjcm9sbFRpbWVsaW5lRnVuYyA9IHRoaXMubWFuYWdlci5zY3JvbGxUaW1lbGluZVBvbHlmaWxsKCk7XHJcbiAgICAgIGlmIChzY3JpcHQgJiYgIXRoaXMuX2FuaW1hdGlvbikge1xyXG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbiA9IHN0YXJ0UG9seWZpbGwoc2NyaXB0LCB0aGlzLm5hdGl2ZUVsZW1lbnQsIHRoaXMuY21wLnZpZXdwb3J0Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuY29udHJvbC5heGlzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBzdXBlcigpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXREcmFnZ2luZyh2YWx1ZTogU2Nyb2xsYmFyRHJhZ2dpbmcpOiB2b2lkIHtcclxuICAgIHRoaXMuem9uZS5ydW4oKCkgPT4gdGhpcy5jbXAuZHJhZ2dpbmcuc2V0KHZhbHVlKSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzdGFydFBvbHlmaWxsKFNjcm9sbFRpbWVsaW5lOiBTY3JvbGxUaW1lbGluZUZ1bmMsIGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzb3VyY2U6IEhUTUxFbGVtZW50LCBheGlzOiAneCcgfCAneScpOiBBbmltYXRpb24ge1xyXG4gIHJldHVybiBlbGVtZW50LmFuaW1hdGUoXHJcbiAgICB7XHJcbiAgICAgIHRyYW5zbGF0ZTogW1xyXG4gICAgICAgICd2YXIoLS1fc2Nyb2xsYmFyLXRodW1iLXRyYW5zZm9ybS1mcm9tKScsXHJcbiAgICAgICAgJ3ZhcigtLV9zY3JvbGxiYXItdGh1bWItdHJhbnNmb3JtLXRvKSdcclxuICAgICAgXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgZmlsbDogJ2JvdGgnLFxyXG4gICAgICBlYXNpbmc6ICdsaW5lYXInLFxyXG4gICAgICB0aW1lbGluZTogbmV3IFNjcm9sbFRpbWVsaW5lKHsgc291cmNlLCBheGlzIH0pXHJcbiAgICB9IGFzIHVua25vd25cclxuICApO1xyXG59XHJcbiJdfQ==