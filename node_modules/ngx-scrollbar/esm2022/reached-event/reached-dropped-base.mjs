import { Directive, inject, effect, runInInjectionContext, NgZone, Injector, Renderer2, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { NG_SCROLLBAR } from 'ngx-scrollbar';
import * as i0 from "@angular/core";
export class ReachedDroppedBase {
    constructor() {
        this.isBrowser = isPlatformBrowser(inject(PLATFORM_ID));
        this.zone = inject(NgZone);
        this.renderer = inject(Renderer2);
        this.injector = inject(Injector);
        this.scrollbar = inject(NG_SCROLLBAR);
        /** An array that contains all trigger elements  **/
        this.triggerElements = [];
        /** An array that contains the chosen outputs */
        this.subscribedEvents = [];
        /** A mapper function to ease forwarding the intersected element to its proper output */
        this.eventActions = {
            top: { emit: () => this.scrollbar.isVerticallyScrollable() ? this.top.emit() : null },
            bottom: { emit: () => this.scrollbar.isVerticallyScrollable() ? this.bottom.emit() : null },
            start: { emit: () => this.scrollbar.isHorizontallyScrollable() ? this.start.emit() : null },
            end: { emit: () => this.scrollbar.isHorizontallyScrollable() ? this.end.emit() : null }
        };
    }
    onAction(trigger) {
        if (trigger) {
            this.eventActions[trigger]?.emit();
        }
    }
    setCssVariable(property, value) {
        if (value) {
            this.scrollbar.nativeElement.style.setProperty(property, `${value}px`);
        }
    }
    activate() {
        this.zone.runOutsideAngular(() => {
            // Create the scrollbars element inside the viewport
            this.triggerElementsWrapper = this.renderer.createElement('div');
            this.renderer.addClass(this.triggerElementsWrapper, this.triggerElementsWrapperClass);
            this.renderer.appendChild(this.scrollbar.viewport.contentWrapperElement, this.triggerElementsWrapper);
            // Create a trigger element for each subscribed event
            this.subscribedEvents.forEach((event) => {
                const triggerElement = this.renderer.createElement('div');
                this.renderer.addClass(triggerElement, this.triggerElementClass);
                this.renderer.setAttribute(triggerElement, 'trigger', event);
                this.renderer.appendChild(this.triggerElementsWrapper, triggerElement);
                this.triggerElements.push(triggerElement);
            });
            // The first time the observer is triggered as soon as the element is observed,
            // This flag is used to ignore this first trigger
            let intersectionObserverInit = false;
            this.intersectionObserver = new IntersectionObserver((entries) => {
                if (intersectionObserverInit) {
                    entries.forEach((entry) => {
                        if (this.isTriggered(entry)) {
                            // Forward the detected trigger element only after the observer is initialized
                            // Only observe the trigger elements when scrollable
                            this.zone.run(() => this.onAction(entry.target.getAttribute('trigger')));
                        }
                    });
                }
                else {
                    // Once the initial element is detected set a flag to true
                    intersectionObserverInit = true;
                }
            }, {
                root: this.scrollbar.viewport.nativeElement,
            });
            this.triggerElements.forEach((el) => this.intersectionObserver.observe(el));
        });
    }
    deactivate() {
        this.intersectionObserver?.disconnect();
        this.triggerElementsWrapper?.remove();
        this.triggerElements = [];
    }
    ngOnInit() {
        if (this.top.observed) {
            this.subscribedEvents.push('top');
        }
        if (this.bottom.observed) {
            this.subscribedEvents.push('bottom');
        }
        if (this.start.observed) {
            this.subscribedEvents.push('start');
        }
        if (this.end.observed) {
            this.subscribedEvents.push('end');
        }
        runInInjectionContext(this.injector, () => {
            effect(() => {
                if (this.disabled()) {
                    this.deactivate();
                }
                else {
                    if (this.isBrowser) {
                        this.activate();
                    }
                }
            });
        });
    }
    ngOnDestroy() {
        this.deactivate();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: ReachedDroppedBase, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.2", type: ReachedDroppedBase, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: ReachedDroppedBase, decorators: [{
            type: Directive
        }] });
//# sourceMappingURL=data:application/json;base64,