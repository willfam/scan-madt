import { Directive, Input, Output, numberAttribute, booleanAttribute, input, EventEmitter } from '@angular/core';
import { ReachedDroppedBase } from './reached-dropped-base';
import * as i0 from "@angular/core";
export class NgScrollReached extends ReachedDroppedBase {
    constructor() {
        super(...arguments);
        this.disabled = input(false, {
            alias: 'disableReached',
            transform: booleanAttribute
        });
        this.top = new EventEmitter();
        this.bottom = new EventEmitter();
        this.start = new EventEmitter();
        this.end = new EventEmitter();
        this.triggerElementsWrapperClass = 'ng-scroll-reached-wrapper';
        this.triggerElementClass = 'scroll-reached-trigger-element';
    }
    /** Reached offset value in px */
    set offsetSetter(value) {
        this.setCssVariable('--reached-offset', value);
    }
    set offsetTopSetter(value) {
        this.setCssVariable('--reached-offset-top', value);
    }
    set offsetBottomSetter(value) {
        this.setCssVariable('--reached-offset-bottom', value);
    }
    set offsetStartSetter(value) {
        this.setCssVariable('--reached-offset-start', value);
    }
    set offsetEndSetter(value) {
        this.setCssVariable('--reached-offset-end', value);
    }
    isTriggered(entry) {
        return entry.isIntersecting;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: NgScrollReached, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.1.2", type: NgScrollReached, isStandalone: true, selector: "ng-scrollbar[reachedTop], ng-scrollbar[reachedBottom], ng-scrollbar[reachedStart], ng-scrollbar[reachedEnd]", inputs: { offsetSetter: { classPropertyName: "offsetSetter", publicName: "reachedOffset", isSignal: false, isRequired: false, transformFunction: numberAttribute }, offsetTopSetter: { classPropertyName: "offsetTopSetter", publicName: "reachedTopOffset", isSignal: false, isRequired: false, transformFunction: numberAttribute }, offsetBottomSetter: { classPropertyName: "offsetBottomSetter", publicName: "reachedBottomOffset", isSignal: false, isRequired: false, transformFunction: numberAttribute }, offsetStartSetter: { classPropertyName: "offsetStartSetter", publicName: "reachedStartOffset", isSignal: false, isRequired: false, transformFunction: numberAttribute }, offsetEndSetter: { classPropertyName: "offsetEndSetter", publicName: "reachedEndOffset", isSignal: false, isRequired: false, transformFunction: numberAttribute }, disabled: { classPropertyName: "disabled", publicName: "disableReached", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { top: "reachedTop", bottom: "reachedBottom", start: "reachedStart", end: "reachedEnd" }, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: NgScrollReached, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-scrollbar[reachedTop], ng-scrollbar[reachedBottom], ng-scrollbar[reachedStart], ng-scrollbar[reachedEnd]',
                    standalone: true,
                }]
        }], propDecorators: { offsetSetter: [{
                type: Input,
                args: [{ alias: 'reachedOffset', transform: numberAttribute }]
            }], offsetTopSetter: [{
                type: Input,
                args: [{ alias: 'reachedTopOffset', transform: numberAttribute }]
            }], offsetBottomSetter: [{
                type: Input,
                args: [{ alias: 'reachedBottomOffset', transform: numberAttribute }]
            }], offsetStartSetter: [{
                type: Input,
                args: [{ alias: 'reachedStartOffset', transform: numberAttribute }]
            }], offsetEndSetter: [{
                type: Input,
                args: [{ alias: 'reachedEndOffset', transform: numberAttribute }]
            }], top: [{
                type: Output,
                args: ['reachedTop']
            }], bottom: [{
                type: Output,
                args: ['reachedBottom']
            }], start: [{
                type: Output,
                args: ['reachedStart']
            }], end: [{
                type: Output,
                args: ['reachedEnd']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc2Nyb2xsLXJlYWNoZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3JlYWNoZWQtZXZlbnQvc3JjL25nLXNjcm9sbC1yZWFjaGVkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sRUFDTixlQUFlLEVBQ2YsZ0JBQWdCLEVBQ2hCLEtBQUssRUFDTCxZQUFZLEVBRWIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7O0FBTTVELE1BQU0sT0FBTyxlQUFnQixTQUFRLGtCQUFrQjtJQUp2RDs7UUEyQkUsYUFBUSxHQUF3RCxLQUFLLENBQTRCLEtBQUssRUFBRTtZQUN0RyxLQUFLLEVBQUUsZ0JBQWdCO1lBQ3ZCLFNBQVMsRUFBRSxnQkFBZ0I7U0FDNUIsQ0FBQyxDQUFDO1FBRW1CLFFBQUcsR0FBdUIsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUVoRCxXQUFNLEdBQXVCLElBQUksWUFBWSxFQUFRLENBQUM7UUFFdkQsVUFBSyxHQUF1QixJQUFJLFlBQVksRUFBUSxDQUFDO1FBRXZELFFBQUcsR0FBdUIsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUUvRCxnQ0FBMkIsR0FBVywyQkFBMkIsQ0FBQztRQUVsRSx3QkFBbUIsR0FBVyxnQ0FBZ0MsQ0FBQztLQUsxRTtJQXpDQyxpQ0FBaUM7SUFDakMsSUFBbUUsWUFBWSxDQUFDLEtBQWE7UUFDM0YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsSUFBc0UsZUFBZSxDQUFDLEtBQWE7UUFDakcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsSUFBeUUsa0JBQWtCLENBQUMsS0FBYTtRQUN2RyxJQUFJLENBQUMsY0FBYyxDQUFDLHlCQUF5QixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxJQUF3RSxpQkFBaUIsQ0FBQyxLQUFhO1FBQ3JHLElBQUksQ0FBQyxjQUFjLENBQUMsd0JBQXdCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVELElBQXNFLGVBQWUsQ0FBQyxLQUFhO1FBQ2pHLElBQUksQ0FBQyxjQUFjLENBQUMsc0JBQXNCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQW1CUyxXQUFXLENBQUMsS0FBZ0M7UUFDcEQsT0FBTyxLQUFLLENBQUMsY0FBYyxDQUFDO0lBQzlCLENBQUM7OEdBMUNVLGVBQWU7a0dBQWYsZUFBZSxnU0FHa0IsZUFBZSxvSkFJWixlQUFlLDZKQUlaLGVBQWUsMEpBSWhCLGVBQWUsb0pBSWpCLGVBQWU7OzJGQW5CbkQsZUFBZTtrQkFKM0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsNkdBQTZHO29CQUN2SCxVQUFVLEVBQUUsSUFBSTtpQkFDakI7OEJBSW9FLFlBQVk7c0JBQTlFLEtBQUs7dUJBQUMsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUU7Z0JBSVMsZUFBZTtzQkFBcEYsS0FBSzt1QkFBQyxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFO2dCQUlTLGtCQUFrQjtzQkFBMUYsS0FBSzt1QkFBQyxFQUFFLEtBQUssRUFBRSxxQkFBcUIsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFO2dCQUlLLGlCQUFpQjtzQkFBeEYsS0FBSzt1QkFBQyxFQUFFLEtBQUssRUFBRSxvQkFBb0IsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFO2dCQUlJLGVBQWU7c0JBQXBGLEtBQUs7dUJBQUMsRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRTtnQkFTMUMsR0FBRztzQkFBeEIsTUFBTTt1QkFBQyxZQUFZO2dCQUVLLE1BQU07c0JBQTlCLE1BQU07dUJBQUMsZUFBZTtnQkFFQyxLQUFLO3NCQUE1QixNQUFNO3VCQUFDLGNBQWM7Z0JBRUEsR0FBRztzQkFBeEIsTUFBTTt1QkFBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgSW5wdXQsXHJcbiAgT3V0cHV0LFxyXG4gIG51bWJlckF0dHJpYnV0ZSxcclxuICBib29sZWFuQXR0cmlidXRlLFxyXG4gIGlucHV0LFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBJbnB1dFNpZ25hbFdpdGhUcmFuc2Zvcm1cclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUmVhY2hlZERyb3BwZWRCYXNlIH0gZnJvbSAnLi9yZWFjaGVkLWRyb3BwZWQtYmFzZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ25nLXNjcm9sbGJhcltyZWFjaGVkVG9wXSwgbmctc2Nyb2xsYmFyW3JlYWNoZWRCb3R0b21dLCBuZy1zY3JvbGxiYXJbcmVhY2hlZFN0YXJ0XSwgbmctc2Nyb2xsYmFyW3JlYWNoZWRFbmRdJyxcclxuICBzdGFuZGFsb25lOiB0cnVlLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdTY3JvbGxSZWFjaGVkIGV4dGVuZHMgUmVhY2hlZERyb3BwZWRCYXNlIHtcclxuXHJcbiAgLyoqIFJlYWNoZWQgb2Zmc2V0IHZhbHVlIGluIHB4ICovXHJcbiAgQElucHV0KHsgYWxpYXM6ICdyZWFjaGVkT2Zmc2V0JywgdHJhbnNmb3JtOiBudW1iZXJBdHRyaWJ1dGUgfSkgc2V0IG9mZnNldFNldHRlcih2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLnNldENzc1ZhcmlhYmxlKCctLXJlYWNoZWQtb2Zmc2V0JywgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgQElucHV0KHsgYWxpYXM6ICdyZWFjaGVkVG9wT2Zmc2V0JywgdHJhbnNmb3JtOiBudW1iZXJBdHRyaWJ1dGUgfSkgc2V0IG9mZnNldFRvcFNldHRlcih2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLnNldENzc1ZhcmlhYmxlKCctLXJlYWNoZWQtb2Zmc2V0LXRvcCcsIHZhbHVlKTtcclxuICB9XHJcblxyXG4gIEBJbnB1dCh7IGFsaWFzOiAncmVhY2hlZEJvdHRvbU9mZnNldCcsIHRyYW5zZm9ybTogbnVtYmVyQXR0cmlidXRlIH0pIHNldCBvZmZzZXRCb3R0b21TZXR0ZXIodmFsdWU6IG51bWJlcikge1xyXG4gICAgdGhpcy5zZXRDc3NWYXJpYWJsZSgnLS1yZWFjaGVkLW9mZnNldC1ib3R0b20nLCB2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoeyBhbGlhczogJ3JlYWNoZWRTdGFydE9mZnNldCcsIHRyYW5zZm9ybTogbnVtYmVyQXR0cmlidXRlIH0pIHNldCBvZmZzZXRTdGFydFNldHRlcih2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLnNldENzc1ZhcmlhYmxlKCctLXJlYWNoZWQtb2Zmc2V0LXN0YXJ0JywgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgQElucHV0KHsgYWxpYXM6ICdyZWFjaGVkRW5kT2Zmc2V0JywgdHJhbnNmb3JtOiBudW1iZXJBdHRyaWJ1dGUgfSkgc2V0IG9mZnNldEVuZFNldHRlcih2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLnNldENzc1ZhcmlhYmxlKCctLXJlYWNoZWQtb2Zmc2V0LWVuZCcsIHZhbHVlKTtcclxuICB9XHJcblxyXG4gIGRpc2FibGVkOiBJbnB1dFNpZ25hbFdpdGhUcmFuc2Zvcm08Ym9vbGVhbiwgc3RyaW5nIHwgYm9vbGVhbj4gPSBpbnB1dDxib29sZWFuLCBzdHJpbmcgfCBib29sZWFuPihmYWxzZSwge1xyXG4gICAgYWxpYXM6ICdkaXNhYmxlUmVhY2hlZCcsXHJcbiAgICB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGVcclxuICB9KTtcclxuXHJcbiAgQE91dHB1dCgncmVhY2hlZFRvcCcpIHRvcDogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xyXG5cclxuICBAT3V0cHV0KCdyZWFjaGVkQm90dG9tJykgYm90dG9tOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcblxyXG4gIEBPdXRwdXQoJ3JlYWNoZWRTdGFydCcpIHN0YXJ0OiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcblxyXG4gIEBPdXRwdXQoJ3JlYWNoZWRFbmQnKSBlbmQ6IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuXHJcbiAgcHJvdGVjdGVkIHRyaWdnZXJFbGVtZW50c1dyYXBwZXJDbGFzczogc3RyaW5nID0gJ25nLXNjcm9sbC1yZWFjaGVkLXdyYXBwZXInO1xyXG5cclxuICBwcm90ZWN0ZWQgdHJpZ2dlckVsZW1lbnRDbGFzczogc3RyaW5nID0gJ3Njcm9sbC1yZWFjaGVkLXRyaWdnZXItZWxlbWVudCc7XHJcblxyXG4gIHByb3RlY3RlZCBpc1RyaWdnZXJlZChlbnRyeTogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeSk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGVudHJ5LmlzSW50ZXJzZWN0aW5nO1xyXG4gIH1cclxufVxyXG4iXX0=