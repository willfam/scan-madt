import { Directive, Input, Output, numberAttribute, booleanAttribute, input, EventEmitter } from '@angular/core';
import { ReachedDroppedBase } from './reached-dropped-base';
import * as i0 from "@angular/core";
export class NgScrollDropped extends ReachedDroppedBase {
    constructor() {
        super(...arguments);
        this.disabled = input(false, {
            alias: 'disableDropped',
            transform: booleanAttribute
        });
        this.top = new EventEmitter();
        this.bottom = new EventEmitter();
        this.start = new EventEmitter();
        this.end = new EventEmitter();
        this.triggerElementsWrapperClass = 'ng-scroll-dropped-wrapper';
        this.triggerElementClass = 'scroll-dropped-trigger-element';
    }
    /** Dropped offset value in px */
    set offsetSetter(value) {
        this.setCssVariable('--dropped-offset', value);
    }
    set offsetTopSetter(value) {
        this.setCssVariable('--dropped-offset-top', value);
    }
    set offsetBottomSetter(value) {
        this.setCssVariable('--dropped-offset-bottom', value);
    }
    set offsetStartSetter(value) {
        this.setCssVariable('--dropped-offset-start', value);
    }
    set offsetEndSetter(value) {
        this.setCssVariable('--dropped-offset-end', value);
    }
    isTriggered(entry) {
        return !entry.isIntersecting;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: NgScrollDropped, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.1.2", type: NgScrollDropped, isStandalone: true, selector: "ng-scrollbar[droppedTop], ng-scrollbar[droppedBottom], ng-scrollbar[droppedStart], ng-scrollbar[droppedEnd]", inputs: { offsetSetter: { classPropertyName: "offsetSetter", publicName: "droppedOffset", isSignal: false, isRequired: false, transformFunction: numberAttribute }, offsetTopSetter: { classPropertyName: "offsetTopSetter", publicName: "droppedTopOffset", isSignal: false, isRequired: false, transformFunction: numberAttribute }, offsetBottomSetter: { classPropertyName: "offsetBottomSetter", publicName: "droppedBottomOffset", isSignal: false, isRequired: false, transformFunction: numberAttribute }, offsetStartSetter: { classPropertyName: "offsetStartSetter", publicName: "droppedStartOffset", isSignal: false, isRequired: false, transformFunction: numberAttribute }, offsetEndSetter: { classPropertyName: "offsetEndSetter", publicName: "droppedEndOffset", isSignal: false, isRequired: false, transformFunction: numberAttribute }, disabled: { classPropertyName: "disabled", publicName: "disableDropped", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { top: "droppedTop", bottom: "droppedBottom", start: "droppedStart", end: "droppedEnd" }, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: NgScrollDropped, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-scrollbar[droppedTop], ng-scrollbar[droppedBottom], ng-scrollbar[droppedStart], ng-scrollbar[droppedEnd]',
                    standalone: true,
                }]
        }], propDecorators: { offsetSetter: [{
                type: Input,
                args: [{ alias: 'droppedOffset', transform: numberAttribute }]
            }], offsetTopSetter: [{
                type: Input,
                args: [{ alias: 'droppedTopOffset', transform: numberAttribute }]
            }], offsetBottomSetter: [{
                type: Input,
                args: [{ alias: 'droppedBottomOffset', transform: numberAttribute }]
            }], offsetStartSetter: [{
                type: Input,
                args: [{ alias: 'droppedStartOffset', transform: numberAttribute }]
            }], offsetEndSetter: [{
                type: Input,
                args: [{ alias: 'droppedEndOffset', transform: numberAttribute }]
            }], top: [{
                type: Output,
                args: ['droppedTop']
            }], bottom: [{
                type: Output,
                args: ['droppedBottom']
            }], start: [{
                type: Output,
                args: ['droppedStart']
            }], end: [{
                type: Output,
                args: ['droppedEnd']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc2Nyb2xsLWRyb3BwZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3JlYWNoZWQtZXZlbnQvc3JjL25nLXNjcm9sbC1kcm9wcGVkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sRUFDTixlQUFlLEVBQ2YsZ0JBQWdCLEVBQ2hCLEtBQUssRUFDTCxZQUFZLEVBRWIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7O0FBTTVELE1BQU0sT0FBTyxlQUFnQixTQUFRLGtCQUFrQjtJQUp2RDs7UUEyQkUsYUFBUSxHQUF3RCxLQUFLLENBQTRCLEtBQUssRUFBRTtZQUN0RyxLQUFLLEVBQUUsZ0JBQWdCO1lBQ3ZCLFNBQVMsRUFBRSxnQkFBZ0I7U0FDNUIsQ0FBQyxDQUFDO1FBRW1CLFFBQUcsR0FBdUIsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUVoRCxXQUFNLEdBQXVCLElBQUksWUFBWSxFQUFRLENBQUM7UUFFdkQsVUFBSyxHQUF1QixJQUFJLFlBQVksRUFBUSxDQUFDO1FBRXZELFFBQUcsR0FBdUIsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUUvRCxnQ0FBMkIsR0FBVywyQkFBMkIsQ0FBQztRQUVsRSx3QkFBbUIsR0FBVyxnQ0FBZ0MsQ0FBQztLQUsxRTtJQXpDQyxpQ0FBaUM7SUFDakMsSUFBbUUsWUFBWSxDQUFDLEtBQWE7UUFDM0YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsSUFBc0UsZUFBZSxDQUFDLEtBQWE7UUFDakcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsSUFBeUUsa0JBQWtCLENBQUMsS0FBYTtRQUN2RyxJQUFJLENBQUMsY0FBYyxDQUFDLHlCQUF5QixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxJQUF3RSxpQkFBaUIsQ0FBQyxLQUFhO1FBQ3JHLElBQUksQ0FBQyxjQUFjLENBQUMsd0JBQXdCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVELElBQXNFLGVBQWUsQ0FBQyxLQUFhO1FBQ2pHLElBQUksQ0FBQyxjQUFjLENBQUMsc0JBQXNCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQW1CUyxXQUFXLENBQUMsS0FBZ0M7UUFDcEQsT0FBTyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUM7SUFDL0IsQ0FBQzs4R0ExQ1UsZUFBZTtrR0FBZixlQUFlLGdTQUdrQixlQUFlLG9KQUlaLGVBQWUsNkpBSVosZUFBZSwwSkFJaEIsZUFBZSxvSkFJakIsZUFBZTs7MkZBbkJuRCxlQUFlO2tCQUozQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSw2R0FBNkc7b0JBQ3ZILFVBQVUsRUFBRSxJQUFJO2lCQUNqQjs4QkFJb0UsWUFBWTtzQkFBOUUsS0FBSzt1QkFBQyxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRTtnQkFJUyxlQUFlO3NCQUFwRixLQUFLO3VCQUFDLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUU7Z0JBSVMsa0JBQWtCO3NCQUExRixLQUFLO3VCQUFDLEVBQUUsS0FBSyxFQUFFLHFCQUFxQixFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUU7Z0JBSUssaUJBQWlCO3NCQUF4RixLQUFLO3VCQUFDLEVBQUUsS0FBSyxFQUFFLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUU7Z0JBSUksZUFBZTtzQkFBcEYsS0FBSzt1QkFBQyxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFO2dCQVMxQyxHQUFHO3NCQUF4QixNQUFNO3VCQUFDLFlBQVk7Z0JBRUssTUFBTTtzQkFBOUIsTUFBTTt1QkFBQyxlQUFlO2dCQUVDLEtBQUs7c0JBQTVCLE1BQU07dUJBQUMsY0FBYztnQkFFQSxHQUFHO3NCQUF4QixNQUFNO3VCQUFDLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIERpcmVjdGl2ZSxcclxuICBJbnB1dCxcclxuICBPdXRwdXQsXHJcbiAgbnVtYmVyQXR0cmlidXRlLFxyXG4gIGJvb2xlYW5BdHRyaWJ1dGUsXHJcbiAgaW5wdXQsXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIElucHV0U2lnbmFsV2l0aFRyYW5zZm9ybVxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSZWFjaGVkRHJvcHBlZEJhc2UgfSBmcm9tICcuL3JlYWNoZWQtZHJvcHBlZC1iYXNlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnbmctc2Nyb2xsYmFyW2Ryb3BwZWRUb3BdLCBuZy1zY3JvbGxiYXJbZHJvcHBlZEJvdHRvbV0sIG5nLXNjcm9sbGJhcltkcm9wcGVkU3RhcnRdLCBuZy1zY3JvbGxiYXJbZHJvcHBlZEVuZF0nLFxyXG4gIHN0YW5kYWxvbmU6IHRydWUsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1Njcm9sbERyb3BwZWQgZXh0ZW5kcyBSZWFjaGVkRHJvcHBlZEJhc2Uge1xyXG5cclxuICAvKiogRHJvcHBlZCBvZmZzZXQgdmFsdWUgaW4gcHggKi9cclxuICBASW5wdXQoeyBhbGlhczogJ2Ryb3BwZWRPZmZzZXQnLCB0cmFuc2Zvcm06IG51bWJlckF0dHJpYnV0ZSB9KSBzZXQgb2Zmc2V0U2V0dGVyKHZhbHVlOiBudW1iZXIpIHtcclxuICAgIHRoaXMuc2V0Q3NzVmFyaWFibGUoJy0tZHJvcHBlZC1vZmZzZXQnLCB2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoeyBhbGlhczogJ2Ryb3BwZWRUb3BPZmZzZXQnLCB0cmFuc2Zvcm06IG51bWJlckF0dHJpYnV0ZSB9KSBzZXQgb2Zmc2V0VG9wU2V0dGVyKHZhbHVlOiBudW1iZXIpIHtcclxuICAgIHRoaXMuc2V0Q3NzVmFyaWFibGUoJy0tZHJvcHBlZC1vZmZzZXQtdG9wJywgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgQElucHV0KHsgYWxpYXM6ICdkcm9wcGVkQm90dG9tT2Zmc2V0JywgdHJhbnNmb3JtOiBudW1iZXJBdHRyaWJ1dGUgfSkgc2V0IG9mZnNldEJvdHRvbVNldHRlcih2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLnNldENzc1ZhcmlhYmxlKCctLWRyb3BwZWQtb2Zmc2V0LWJvdHRvbScsIHZhbHVlKTtcclxuICB9XHJcblxyXG4gIEBJbnB1dCh7IGFsaWFzOiAnZHJvcHBlZFN0YXJ0T2Zmc2V0JywgdHJhbnNmb3JtOiBudW1iZXJBdHRyaWJ1dGUgfSkgc2V0IG9mZnNldFN0YXJ0U2V0dGVyKHZhbHVlOiBudW1iZXIpIHtcclxuICAgIHRoaXMuc2V0Q3NzVmFyaWFibGUoJy0tZHJvcHBlZC1vZmZzZXQtc3RhcnQnLCB2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoeyBhbGlhczogJ2Ryb3BwZWRFbmRPZmZzZXQnLCB0cmFuc2Zvcm06IG51bWJlckF0dHJpYnV0ZSB9KSBzZXQgb2Zmc2V0RW5kU2V0dGVyKHZhbHVlOiBudW1iZXIpIHtcclxuICAgIHRoaXMuc2V0Q3NzVmFyaWFibGUoJy0tZHJvcHBlZC1vZmZzZXQtZW5kJywgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgZGlzYWJsZWQ6IElucHV0U2lnbmFsV2l0aFRyYW5zZm9ybTxib29sZWFuLCBzdHJpbmcgfCBib29sZWFuPiA9IGlucHV0PGJvb2xlYW4sIHN0cmluZyB8IGJvb2xlYW4+KGZhbHNlLCB7XHJcbiAgICBhbGlhczogJ2Rpc2FibGVEcm9wcGVkJyxcclxuICAgIHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZVxyXG4gIH0pO1xyXG5cclxuICBAT3V0cHV0KCdkcm9wcGVkVG9wJykgdG9wOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcblxyXG4gIEBPdXRwdXQoJ2Ryb3BwZWRCb3R0b20nKSBib3R0b206IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuXHJcbiAgQE91dHB1dCgnZHJvcHBlZFN0YXJ0Jykgc3RhcnQ6IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuXHJcbiAgQE91dHB1dCgnZHJvcHBlZEVuZCcpIGVuZDogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xyXG5cclxuICBwcm90ZWN0ZWQgdHJpZ2dlckVsZW1lbnRzV3JhcHBlckNsYXNzOiBzdHJpbmcgPSAnbmctc2Nyb2xsLWRyb3BwZWQtd3JhcHBlcic7XHJcblxyXG4gIHByb3RlY3RlZCB0cmlnZ2VyRWxlbWVudENsYXNzOiBzdHJpbmcgPSAnc2Nyb2xsLWRyb3BwZWQtdHJpZ2dlci1lbGVtZW50JztcclxuXHJcbiAgcHJvdGVjdGVkIGlzVHJpZ2dlcmVkKGVudHJ5OiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gIWVudHJ5LmlzSW50ZXJzZWN0aW5nO1xyXG4gIH1cclxufVxyXG4iXX0=