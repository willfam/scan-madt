import { Directive, Input, inject, effect, contentChild } from '@angular/core';
import { Platform } from '@angular/cdk/platform';
import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { NgScrollbarExt } from 'ngx-scrollbar';
import * as i0 from "@angular/core";
export class NgScrollbarCdkVirtualScroll {
    constructor() {
        this.scrollbar = inject(NgScrollbarExt);
        this.platform = inject(Platform);
        this.virtualScrollViewportRef = contentChild(CdkVirtualScrollViewport);
        this.scrollbar.externalViewport = '.cdk-virtual-scroll-viewport';
        this.scrollbar.externalContentWrapper = '.cdk-virtual-scroll-content-wrapper';
        this.scrollbar.externalSpacer = '.cdk-virtual-scroll-spacer';
        effect((onCleanup) => {
            // If content width is bigger than the viewport, we need to update the spacer width to display horizontal scrollbar
            let resizeObserver;
            const virtualScrollViewport = this.virtualScrollViewportRef();
            const spacer = virtualScrollViewport.elementRef.nativeElement.querySelector(this.scrollbar.externalSpacer);
            if (this.platform.isBrowser && virtualScrollViewport) {
                resizeObserver = new ResizeObserver((entries) => {
                    entries.forEach((entry) => {
                        if (virtualScrollViewport.orientation === 'vertical') {
                            spacer.style.setProperty('width', `${entry.contentRect.width}px`);
                        }
                        else {
                            spacer.style.setProperty('height', `${entry.contentRect.height}px`);
                        }
                    });
                    // Disconnect after first change if directive is not set to auto
                    if (this.cdkVirtualScrollViewport !== 'auto') {
                        resizeObserver.disconnect();
                    }
                    // Observe content wrapper for size changes
                    resizeObserver.observe(virtualScrollViewport._contentWrapper.nativeElement);
                });
            }
            onCleanup(() => resizeObserver?.disconnect());
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: NgScrollbarCdkVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.2.0", version: "18.1.2", type: NgScrollbarCdkVirtualScroll, isStandalone: true, selector: "ng-scrollbar[cdkVirtualScrollViewport]", inputs: { cdkVirtualScrollViewport: "cdkVirtualScrollViewport" }, queries: [{ propertyName: "virtualScrollViewportRef", first: true, predicate: CdkVirtualScrollViewport, descendants: true, isSignal: true }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: NgScrollbarCdkVirtualScroll, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'ng-scrollbar[cdkVirtualScrollViewport]'
                }]
        }], ctorParameters: () => [], propDecorators: { cdkVirtualScrollViewport: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLXZpcnR1YWwtc2Nyb2xsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXNjcm9sbGJhci9jZGsvc3JjL2Nkay12aXJ0dWFsLXNjcm9sbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sTUFBTSxFQUNOLFlBQVksRUFHYixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDakQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDbEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFNL0MsTUFBTSxPQUFPLDJCQUEyQjtJQVV0QztRQVJpQixjQUFTLEdBQW1CLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUVuRCxhQUFRLEdBQWEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXRDLDZCQUF3QixHQUFxQyxZQUFZLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUtuSCxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixHQUFHLDhCQUE4QixDQUFDO1FBQ2pFLElBQUksQ0FBQyxTQUFTLENBQUMsc0JBQXNCLEdBQUcscUNBQXFDLENBQUM7UUFDOUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsNEJBQTRCLENBQUM7UUFFN0QsTUFBTSxDQUFDLENBQUMsU0FBa0MsRUFBRSxFQUFFO1lBQzVDLG1IQUFtSDtZQUNuSCxJQUFJLGNBQThCLENBQUM7WUFDbkMsTUFBTSxxQkFBcUIsR0FBNkIsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7WUFFeEYsTUFBTSxNQUFNLEdBQWdCLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7WUFFeEgsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO2dCQUNyRCxjQUFjLEdBQUcsSUFBSSxjQUFjLENBQUMsQ0FBQyxPQUE4QixFQUFFLEVBQUU7b0JBQ3JFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUEwQixFQUFFLEVBQUU7d0JBQzdDLElBQUkscUJBQXFCLENBQUMsV0FBVyxLQUFLLFVBQVUsRUFBRSxDQUFDOzRCQUNyRCxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsR0FBSSxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQU0sSUFBSSxDQUFDLENBQUM7d0JBQ3RFLENBQUM7NkJBQU0sQ0FBQzs0QkFDTixNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsR0FBSSxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU8sSUFBSSxDQUFDLENBQUM7d0JBQ3hFLENBQUM7b0JBQ0gsQ0FBQyxDQUFDLENBQUM7b0JBRUgsZ0VBQWdFO29CQUNoRSxJQUFJLElBQUksQ0FBQyx3QkFBd0IsS0FBSyxNQUFNLEVBQUUsQ0FBQzt3QkFDN0MsY0FBYyxDQUFDLFVBQVUsRUFBRSxDQUFDO29CQUM5QixDQUFDO29CQUNELDJDQUEyQztvQkFDM0MsY0FBYyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQzlFLENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQztZQUVELFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7OEdBM0NVLDJCQUEyQjtrR0FBM0IsMkJBQTJCLDBOQU1xRCx3QkFBd0I7OzJGQU54RywyQkFBMkI7a0JBSnZDLFNBQVM7bUJBQUM7b0JBQ1QsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSx3Q0FBd0M7aUJBQ25EO3dEQVNVLHdCQUF3QjtzQkFBaEMsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgRGlyZWN0aXZlLFxyXG4gIElucHV0LFxyXG4gIGluamVjdCxcclxuICBlZmZlY3QsXHJcbiAgY29udGVudENoaWxkLFxyXG4gIFNpZ25hbCxcclxuICBFZmZlY3RDbGVhbnVwUmVnaXN0ZXJGblxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wbGF0Zm9ybSc7XHJcbmltcG9ydCB7IENka1ZpcnR1YWxTY3JvbGxWaWV3cG9ydCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9zY3JvbGxpbmcnO1xyXG5pbXBvcnQgeyBOZ1Njcm9sbGJhckV4dCB9IGZyb20gJ25neC1zY3JvbGxiYXInO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcclxuICBzZWxlY3RvcjogJ25nLXNjcm9sbGJhcltjZGtWaXJ0dWFsU2Nyb2xsVmlld3BvcnRdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdTY3JvbGxiYXJDZGtWaXJ0dWFsU2Nyb2xsIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBzY3JvbGxiYXI6IE5nU2Nyb2xsYmFyRXh0ID0gaW5qZWN0KE5nU2Nyb2xsYmFyRXh0KTtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBwbGF0Zm9ybTogUGxhdGZvcm0gPSBpbmplY3QoUGxhdGZvcm0pO1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IHZpcnR1YWxTY3JvbGxWaWV3cG9ydFJlZjogU2lnbmFsPENka1ZpcnR1YWxTY3JvbGxWaWV3cG9ydD4gPSBjb250ZW50Q2hpbGQoQ2RrVmlydHVhbFNjcm9sbFZpZXdwb3J0KTtcclxuXHJcbiAgQElucHV0KCkgY2RrVmlydHVhbFNjcm9sbFZpZXdwb3J0OiAnJyB8ICdhdXRvJztcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnNjcm9sbGJhci5leHRlcm5hbFZpZXdwb3J0ID0gJy5jZGstdmlydHVhbC1zY3JvbGwtdmlld3BvcnQnO1xyXG4gICAgdGhpcy5zY3JvbGxiYXIuZXh0ZXJuYWxDb250ZW50V3JhcHBlciA9ICcuY2RrLXZpcnR1YWwtc2Nyb2xsLWNvbnRlbnQtd3JhcHBlcic7XHJcbiAgICB0aGlzLnNjcm9sbGJhci5leHRlcm5hbFNwYWNlciA9ICcuY2RrLXZpcnR1YWwtc2Nyb2xsLXNwYWNlcic7XHJcblxyXG4gICAgZWZmZWN0KChvbkNsZWFudXA6IEVmZmVjdENsZWFudXBSZWdpc3RlckZuKSA9PiB7XHJcbiAgICAgIC8vIElmIGNvbnRlbnQgd2lkdGggaXMgYmlnZ2VyIHRoYW4gdGhlIHZpZXdwb3J0LCB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgc3BhY2VyIHdpZHRoIHRvIGRpc3BsYXkgaG9yaXpvbnRhbCBzY3JvbGxiYXJcclxuICAgICAgbGV0IHJlc2l6ZU9ic2VydmVyOiBSZXNpemVPYnNlcnZlcjtcclxuICAgICAgY29uc3QgdmlydHVhbFNjcm9sbFZpZXdwb3J0OiBDZGtWaXJ0dWFsU2Nyb2xsVmlld3BvcnQgPSB0aGlzLnZpcnR1YWxTY3JvbGxWaWV3cG9ydFJlZigpO1xyXG5cclxuICAgICAgY29uc3Qgc3BhY2VyOiBIVE1MRWxlbWVudCA9IHZpcnR1YWxTY3JvbGxWaWV3cG9ydC5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnNjcm9sbGJhci5leHRlcm5hbFNwYWNlcik7XHJcblxyXG4gICAgICBpZiAodGhpcy5wbGF0Zm9ybS5pc0Jyb3dzZXIgJiYgdmlydHVhbFNjcm9sbFZpZXdwb3J0KSB7XHJcbiAgICAgICAgcmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGVudHJpZXM6IFJlc2l6ZU9ic2VydmVyRW50cnlbXSkgPT4ge1xyXG4gICAgICAgICAgZW50cmllcy5mb3JFYWNoKChlbnRyeTogUmVzaXplT2JzZXJ2ZXJFbnRyeSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodmlydHVhbFNjcm9sbFZpZXdwb3J0Lm9yaWVudGF0aW9uID09PSAndmVydGljYWwnKSB7XHJcbiAgICAgICAgICAgICAgc3BhY2VyLnN0eWxlLnNldFByb3BlcnR5KCd3aWR0aCcsIGAkeyBlbnRyeS5jb250ZW50UmVjdC53aWR0aCB9cHhgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBzcGFjZXIuc3R5bGUuc2V0UHJvcGVydHkoJ2hlaWdodCcsIGAkeyBlbnRyeS5jb250ZW50UmVjdC5oZWlnaHQgfXB4YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIC8vIERpc2Nvbm5lY3QgYWZ0ZXIgZmlyc3QgY2hhbmdlIGlmIGRpcmVjdGl2ZSBpcyBub3Qgc2V0IHRvIGF1dG9cclxuICAgICAgICAgIGlmICh0aGlzLmNka1ZpcnR1YWxTY3JvbGxWaWV3cG9ydCAhPT0gJ2F1dG8nKSB7XHJcbiAgICAgICAgICAgIHJlc2l6ZU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vIE9ic2VydmUgY29udGVudCB3cmFwcGVyIGZvciBzaXplIGNoYW5nZXNcclxuICAgICAgICAgIHJlc2l6ZU9ic2VydmVyLm9ic2VydmUodmlydHVhbFNjcm9sbFZpZXdwb3J0Ll9jb250ZW50V3JhcHBlci5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgb25DbGVhbnVwKCgpID0+IHJlc2l6ZU9ic2VydmVyPy5kaXNjb25uZWN0KCkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==